"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from openapi.types import BaseModel
from openapi.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    SecurityMetadata,
)
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListTenantEventsByDestinationGlobalsTypedDict(TypedDict):
    tenant_id: NotRequired[str]


class ListTenantEventsByDestinationGlobals(BaseModel):
    tenant_id: Annotated[
        Optional[str],
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ] = None


class ListTenantEventsByDestinationSecurityTypedDict(TypedDict):
    admin_api_key: NotRequired[str]
    tenant_jwt: NotRequired[str]


class ListTenantEventsByDestinationSecurity(BaseModel):
    admin_api_key: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="http",
                sub_type="bearer",
                field_name="Authorization",
            )
        ),
    ] = None

    tenant_jwt: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="http",
                sub_type="bearer",
                field_name="Authorization",
            )
        ),
    ] = None


class ListTenantEventsByDestinationStatus(str, Enum):
    r"""Filter events by delivery status."""

    SUCCESS = "success"
    FAILED = "failed"


class ListTenantEventsByDestinationRequestTypedDict(TypedDict):
    destination_id: str
    r"""The ID of the destination."""
    tenant_id: NotRequired[str]
    r"""The ID of the tenant. Required when using AdminApiKey authentication."""
    status: NotRequired[ListTenantEventsByDestinationStatus]
    r"""Filter events by delivery status."""


class ListTenantEventsByDestinationRequest(BaseModel):
    destination_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The ID of the destination."""

    tenant_id: Annotated[
        Optional[str],
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ] = None
    r"""The ID of the tenant. Required when using AdminApiKey authentication."""

    status: Annotated[
        Optional[ListTenantEventsByDestinationStatus],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter events by delivery status."""
