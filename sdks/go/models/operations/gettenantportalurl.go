// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"openapi/models/components"
)

type GetTenantPortalURLGlobals struct {
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
}

func (o *GetTenantPortalURLGlobals) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

// GetTenantPortalURLTheme - Optional theme preference for the portal.
type GetTenantPortalURLTheme string

const (
	GetTenantPortalURLThemeLight GetTenantPortalURLTheme = "light"
	GetTenantPortalURLThemeDark  GetTenantPortalURLTheme = "dark"
)

func (e GetTenantPortalURLTheme) ToPointer() *GetTenantPortalURLTheme {
	return &e
}
func (e *GetTenantPortalURLTheme) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "light":
		fallthrough
	case "dark":
		*e = GetTenantPortalURLTheme(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTenantPortalURLTheme: %v", v)
	}
}

type GetTenantPortalURLRequest struct {
	// The ID of the tenant. Required when using AdminApiKey authentication.
	TenantID *string `pathParam:"style=simple,explode=false,name=tenant_id"`
	// Optional theme preference for the portal.
	Theme *GetTenantPortalURLTheme `queryParam:"style=form,explode=true,name=theme"`
}

func (o *GetTenantPortalURLRequest) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *GetTenantPortalURLRequest) GetTheme() *GetTenantPortalURLTheme {
	if o == nil {
		return nil
	}
	return o.Theme
}

type GetTenantPortalURLResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Portal redirect URL.
	PortalRedirect *components.PortalRedirect
}

func (o *GetTenantPortalURLResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTenantPortalURLResponse) GetPortalRedirect() *components.PortalRedirect {
	if o == nil {
		return nil
	}
	return o.PortalRedirect
}
