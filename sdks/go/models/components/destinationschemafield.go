// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type DestinationSchemaFieldType string

const (
	DestinationSchemaFieldTypeText    DestinationSchemaFieldType = "text"
	DestinationSchemaFieldTypeNumber  DestinationSchemaFieldType = "number"
	DestinationSchemaFieldTypeBoolean DestinationSchemaFieldType = "boolean"
)

func (e DestinationSchemaFieldType) ToPointer() *DestinationSchemaFieldType {
	return &e
}
func (e *DestinationSchemaFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		fallthrough
	case "number":
		fallthrough
	case "boolean":
		*e = DestinationSchemaFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSchemaFieldType: %v", v)
	}
}

type DestinationSchemaField struct {
	Type        *DestinationSchemaFieldType `json:"type,omitempty"`
	Label       *string                     `json:"label,omitempty"`
	Description *string                     `json:"description,omitempty"`
	// Regex string for validation.
	Validation *string `json:"validation,omitempty"`
	Required   *bool   `json:"required,omitempty"`
}

func (o *DestinationSchemaField) GetType() *DestinationSchemaFieldType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *DestinationSchemaField) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DestinationSchemaField) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *DestinationSchemaField) GetValidation() *string {
	if o == nil {
		return nil
	}
	return o.Validation
}

func (o *DestinationSchemaField) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}
