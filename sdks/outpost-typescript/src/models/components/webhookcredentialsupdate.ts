/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WebhookCredentialsUpdate = {
  /**
   * New secret (only allowed for admin).
   */
  secret?: string | undefined;
  /**
   * Previous secret for rotation (only allowed for admin).
   */
  previousSecret?: string | undefined;
  /**
   * Invalidation time for previous secret (only allowed for admin).
   */
  previousSecretInvalidAt?: Date | undefined;
  /**
   * Set to true to rotate the secret. The current secret becomes the previous_secret, and a new secret is generated. `previous_secret_invalid_at` defaults to 24h if not provided.
   */
  rotateSecret?: boolean | undefined;
};

/** @internal */
export const WebhookCredentialsUpdate$inboundSchema: z.ZodType<
  WebhookCredentialsUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  secret: z.string().optional(),
  previous_secret: z.string().optional(),
  previous_secret_invalid_at: z.string().datetime({ offset: true }).transform(
    v => new Date(v)
  ).optional(),
  rotate_secret: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "previous_secret": "previousSecret",
    "previous_secret_invalid_at": "previousSecretInvalidAt",
    "rotate_secret": "rotateSecret",
  });
});

/** @internal */
export type WebhookCredentialsUpdate$Outbound = {
  secret?: string | undefined;
  previous_secret?: string | undefined;
  previous_secret_invalid_at?: string | undefined;
  rotate_secret?: boolean | undefined;
};

/** @internal */
export const WebhookCredentialsUpdate$outboundSchema: z.ZodType<
  WebhookCredentialsUpdate$Outbound,
  z.ZodTypeDef,
  WebhookCredentialsUpdate
> = z.object({
  secret: z.string().optional(),
  previousSecret: z.string().optional(),
  previousSecretInvalidAt: z.date().transform(v => v.toISOString()).optional(),
  rotateSecret: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    previousSecret: "previous_secret",
    previousSecretInvalidAt: "previous_secret_invalid_at",
    rotateSecret: "rotate_secret",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookCredentialsUpdate$ {
  /** @deprecated use `WebhookCredentialsUpdate$inboundSchema` instead. */
  export const inboundSchema = WebhookCredentialsUpdate$inboundSchema;
  /** @deprecated use `WebhookCredentialsUpdate$outboundSchema` instead. */
  export const outboundSchema = WebhookCredentialsUpdate$outboundSchema;
  /** @deprecated use `WebhookCredentialsUpdate$Outbound` instead. */
  export type Outbound = WebhookCredentialsUpdate$Outbound;
}

export function webhookCredentialsUpdateToJSON(
  webhookCredentialsUpdate: WebhookCredentialsUpdate,
): string {
  return JSON.stringify(
    WebhookCredentialsUpdate$outboundSchema.parse(webhookCredentialsUpdate),
  );
}

export function webhookCredentialsUpdateFromJSON(
  jsonString: string,
): SafeParseResult<WebhookCredentialsUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookCredentialsUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookCredentialsUpdate' from JSON`,
  );
}
