/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PortalRedirect = {
  /**
   * Redirect URL containing a JWT to authenticate the user with the portal.
   */
  redirectUrl?: string | undefined;
};

/** @internal */
export const PortalRedirect$inboundSchema: z.ZodType<
  PortalRedirect,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirect_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "redirect_url": "redirectUrl",
  });
});

/** @internal */
export type PortalRedirect$Outbound = {
  redirect_url?: string | undefined;
};

/** @internal */
export const PortalRedirect$outboundSchema: z.ZodType<
  PortalRedirect$Outbound,
  z.ZodTypeDef,
  PortalRedirect
> = z.object({
  redirectUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    redirectUrl: "redirect_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortalRedirect$ {
  /** @deprecated use `PortalRedirect$inboundSchema` instead. */
  export const inboundSchema = PortalRedirect$inboundSchema;
  /** @deprecated use `PortalRedirect$outboundSchema` instead. */
  export const outboundSchema = PortalRedirect$outboundSchema;
  /** @deprecated use `PortalRedirect$Outbound` instead. */
  export type Outbound = PortalRedirect$Outbound;
}

export function portalRedirectToJSON(portalRedirect: PortalRedirect): string {
  return JSON.stringify(PortalRedirect$outboundSchema.parse(portalRedirect));
}

export function portalRedirectFromJSON(
  jsonString: string,
): SafeParseResult<PortalRedirect, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortalRedirect$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortalRedirect' from JSON`,
  );
}
