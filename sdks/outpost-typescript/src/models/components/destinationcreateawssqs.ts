/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AWSSQSConfig,
  AWSSQSConfig$inboundSchema,
  AWSSQSConfig$Outbound,
  AWSSQSConfig$outboundSchema,
} from "./awssqsconfig.js";
import {
  AWSSQSCredentials,
  AWSSQSCredentials$inboundSchema,
  AWSSQSCredentials$Outbound,
  AWSSQSCredentials$outboundSchema,
} from "./awssqscredentials.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";

/**
 * Type of the destination. Must be 'aws_sqs'.
 */
export const DestinationCreateAWSSQSType = {
  AwsSqs: "aws_sqs",
} as const;
/**
 * Type of the destination. Must be 'aws_sqs'.
 */
export type DestinationCreateAWSSQSType = ClosedEnum<
  typeof DestinationCreateAWSSQSType
>;

export type DestinationCreateAWSSQS = {
  /**
   * Optional user-provided ID. A UUID will be generated if empty.
   */
  id?: string | undefined;
  /**
   * Type of the destination. Must be 'aws_sqs'.
   */
  type: DestinationCreateAWSSQSType;
  /**
   * "*" or an array of enabled topics.
   */
  topics: Topics;
  config: AWSSQSConfig;
  credentials: AWSSQSCredentials;
};

/** @internal */
export const DestinationCreateAWSSQSType$inboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateAWSSQSType
> = z.nativeEnum(DestinationCreateAWSSQSType);

/** @internal */
export const DestinationCreateAWSSQSType$outboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateAWSSQSType
> = DestinationCreateAWSSQSType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateAWSSQSType$ {
  /** @deprecated use `DestinationCreateAWSSQSType$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateAWSSQSType$inboundSchema;
  /** @deprecated use `DestinationCreateAWSSQSType$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateAWSSQSType$outboundSchema;
}

/** @internal */
export const DestinationCreateAWSSQS$inboundSchema: z.ZodType<
  DestinationCreateAWSSQS,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateAWSSQSType$inboundSchema,
  topics: Topics$inboundSchema,
  config: AWSSQSConfig$inboundSchema,
  credentials: AWSSQSCredentials$inboundSchema,
});

/** @internal */
export type DestinationCreateAWSSQS$Outbound = {
  id?: string | undefined;
  type: string;
  topics: Topics$Outbound;
  config: AWSSQSConfig$Outbound;
  credentials: AWSSQSCredentials$Outbound;
};

/** @internal */
export const DestinationCreateAWSSQS$outboundSchema: z.ZodType<
  DestinationCreateAWSSQS$Outbound,
  z.ZodTypeDef,
  DestinationCreateAWSSQS
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateAWSSQSType$outboundSchema,
  topics: Topics$outboundSchema,
  config: AWSSQSConfig$outboundSchema,
  credentials: AWSSQSCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateAWSSQS$ {
  /** @deprecated use `DestinationCreateAWSSQS$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateAWSSQS$inboundSchema;
  /** @deprecated use `DestinationCreateAWSSQS$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateAWSSQS$outboundSchema;
  /** @deprecated use `DestinationCreateAWSSQS$Outbound` instead. */
  export type Outbound = DestinationCreateAWSSQS$Outbound;
}

export function destinationCreateAWSSQSToJSON(
  destinationCreateAWSSQS: DestinationCreateAWSSQS,
): string {
  return JSON.stringify(
    DestinationCreateAWSSQS$outboundSchema.parse(destinationCreateAWSSQS),
  );
}

export function destinationCreateAWSSQSFromJSON(
  jsonString: string,
): SafeParseResult<DestinationCreateAWSSQS, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationCreateAWSSQS$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationCreateAWSSQS' from JSON`,
  );
}
