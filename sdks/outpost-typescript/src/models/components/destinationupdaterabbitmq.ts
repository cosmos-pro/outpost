/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RabbitMQConfig,
  RabbitMQConfig$inboundSchema,
  RabbitMQConfig$Outbound,
  RabbitMQConfig$outboundSchema,
} from "./rabbitmqconfig.js";
import {
  RabbitMQCredentials,
  RabbitMQCredentials$inboundSchema,
  RabbitMQCredentials$Outbound,
  RabbitMQCredentials$outboundSchema,
} from "./rabbitmqcredentials.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";

export type DestinationUpdateRabbitMQ = {
  /**
   * "*" or an array of enabled topics.
   */
  topics?: Topics | undefined;
  config?: RabbitMQConfig | undefined;
  credentials?: RabbitMQCredentials | undefined;
};

/** @internal */
export const DestinationUpdateRabbitMQ$inboundSchema: z.ZodType<
  DestinationUpdateRabbitMQ,
  z.ZodTypeDef,
  unknown
> = z.object({
  topics: Topics$inboundSchema.optional(),
  config: RabbitMQConfig$inboundSchema.optional(),
  credentials: RabbitMQCredentials$inboundSchema.optional(),
});

/** @internal */
export type DestinationUpdateRabbitMQ$Outbound = {
  topics?: Topics$Outbound | undefined;
  config?: RabbitMQConfig$Outbound | undefined;
  credentials?: RabbitMQCredentials$Outbound | undefined;
};

/** @internal */
export const DestinationUpdateRabbitMQ$outboundSchema: z.ZodType<
  DestinationUpdateRabbitMQ$Outbound,
  z.ZodTypeDef,
  DestinationUpdateRabbitMQ
> = z.object({
  topics: Topics$outboundSchema.optional(),
  config: RabbitMQConfig$outboundSchema.optional(),
  credentials: RabbitMQCredentials$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationUpdateRabbitMQ$ {
  /** @deprecated use `DestinationUpdateRabbitMQ$inboundSchema` instead. */
  export const inboundSchema = DestinationUpdateRabbitMQ$inboundSchema;
  /** @deprecated use `DestinationUpdateRabbitMQ$outboundSchema` instead. */
  export const outboundSchema = DestinationUpdateRabbitMQ$outboundSchema;
  /** @deprecated use `DestinationUpdateRabbitMQ$Outbound` instead. */
  export type Outbound = DestinationUpdateRabbitMQ$Outbound;
}

export function destinationUpdateRabbitMQToJSON(
  destinationUpdateRabbitMQ: DestinationUpdateRabbitMQ,
): string {
  return JSON.stringify(
    DestinationUpdateRabbitMQ$outboundSchema.parse(destinationUpdateRabbitMQ),
  );
}

export function destinationUpdateRabbitMQFromJSON(
  jsonString: string,
): SafeParseResult<DestinationUpdateRabbitMQ, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationUpdateRabbitMQ$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationUpdateRabbitMQ' from JSON`,
  );
}
