/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WebhookConfig = {
  /**
   * The URL to send the webhook events to.
   */
  url: string;
};

/** @internal */
export const WebhookConfig$inboundSchema: z.ZodType<
  WebhookConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type WebhookConfig$Outbound = {
  url: string;
};

/** @internal */
export const WebhookConfig$outboundSchema: z.ZodType<
  WebhookConfig$Outbound,
  z.ZodTypeDef,
  WebhookConfig
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookConfig$ {
  /** @deprecated use `WebhookConfig$inboundSchema` instead. */
  export const inboundSchema = WebhookConfig$inboundSchema;
  /** @deprecated use `WebhookConfig$outboundSchema` instead. */
  export const outboundSchema = WebhookConfig$outboundSchema;
  /** @deprecated use `WebhookConfig$Outbound` instead. */
  export type Outbound = WebhookConfig$Outbound;
}

export function webhookConfigToJSON(webhookConfig: WebhookConfig): string {
  return JSON.stringify(WebhookConfig$outboundSchema.parse(webhookConfig));
}

export function webhookConfigFromJSON(
  jsonString: string,
): SafeParseResult<WebhookConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookConfig' from JSON`,
  );
}
