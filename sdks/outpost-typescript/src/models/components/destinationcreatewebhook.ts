/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";
import {
  WebhookConfig,
  WebhookConfig$inboundSchema,
  WebhookConfig$Outbound,
  WebhookConfig$outboundSchema,
} from "./webhookconfig.js";
import {
  WebhookCredentials,
  WebhookCredentials$inboundSchema,
  WebhookCredentials$Outbound,
  WebhookCredentials$outboundSchema,
} from "./webhookcredentials.js";

/**
 * Type of the destination. Must be 'webhook'.
 */
export const DestinationCreateWebhookType = {
  Webhook: "webhook",
} as const;
/**
 * Type of the destination. Must be 'webhook'.
 */
export type DestinationCreateWebhookType = ClosedEnum<
  typeof DestinationCreateWebhookType
>;

export type DestinationCreateWebhook = {
  /**
   * Optional user-provided ID. A UUID will be generated if empty.
   */
  id?: string | undefined;
  /**
   * Type of the destination. Must be 'webhook'.
   */
  type: DestinationCreateWebhookType;
  /**
   * "*" or an array of enabled topics.
   */
  topics: Topics;
  config: WebhookConfig;
  credentials?: WebhookCredentials | undefined;
};

/** @internal */
export const DestinationCreateWebhookType$inboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateWebhookType
> = z.nativeEnum(DestinationCreateWebhookType);

/** @internal */
export const DestinationCreateWebhookType$outboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateWebhookType
> = DestinationCreateWebhookType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateWebhookType$ {
  /** @deprecated use `DestinationCreateWebhookType$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateWebhookType$inboundSchema;
  /** @deprecated use `DestinationCreateWebhookType$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateWebhookType$outboundSchema;
}

/** @internal */
export const DestinationCreateWebhook$inboundSchema: z.ZodType<
  DestinationCreateWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateWebhookType$inboundSchema,
  topics: Topics$inboundSchema,
  config: WebhookConfig$inboundSchema,
  credentials: WebhookCredentials$inboundSchema.optional(),
});

/** @internal */
export type DestinationCreateWebhook$Outbound = {
  id?: string | undefined;
  type: string;
  topics: Topics$Outbound;
  config: WebhookConfig$Outbound;
  credentials?: WebhookCredentials$Outbound | undefined;
};

/** @internal */
export const DestinationCreateWebhook$outboundSchema: z.ZodType<
  DestinationCreateWebhook$Outbound,
  z.ZodTypeDef,
  DestinationCreateWebhook
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateWebhookType$outboundSchema,
  topics: Topics$outboundSchema,
  config: WebhookConfig$outboundSchema,
  credentials: WebhookCredentials$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateWebhook$ {
  /** @deprecated use `DestinationCreateWebhook$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateWebhook$inboundSchema;
  /** @deprecated use `DestinationCreateWebhook$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateWebhook$outboundSchema;
  /** @deprecated use `DestinationCreateWebhook$Outbound` instead. */
  export type Outbound = DestinationCreateWebhook$Outbound;
}

export function destinationCreateWebhookToJSON(
  destinationCreateWebhook: DestinationCreateWebhook,
): string {
  return JSON.stringify(
    DestinationCreateWebhook$outboundSchema.parse(destinationCreateWebhook),
  );
}

export function destinationCreateWebhookFromJSON(
  jsonString: string,
): SafeParseResult<DestinationCreateWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationCreateWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationCreateWebhook' from JSON`,
  );
}
