/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTenantEventByDestinationGlobals = {
  tenantId?: string | undefined;
};

export type GetTenantEventByDestinationRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the destination.
   */
  destinationId: string;
  /**
   * The ID of the event.
   */
  eventId: string;
};

/** @internal */
export const GetTenantEventByDestinationGlobals$inboundSchema: z.ZodType<
  GetTenantEventByDestinationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type GetTenantEventByDestinationGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const GetTenantEventByDestinationGlobals$outboundSchema: z.ZodType<
  GetTenantEventByDestinationGlobals$Outbound,
  z.ZodTypeDef,
  GetTenantEventByDestinationGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantEventByDestinationGlobals$ {
  /** @deprecated use `GetTenantEventByDestinationGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTenantEventByDestinationGlobals$inboundSchema;
  /** @deprecated use `GetTenantEventByDestinationGlobals$outboundSchema` instead. */
  export const outboundSchema =
    GetTenantEventByDestinationGlobals$outboundSchema;
  /** @deprecated use `GetTenantEventByDestinationGlobals$Outbound` instead. */
  export type Outbound = GetTenantEventByDestinationGlobals$Outbound;
}

export function getTenantEventByDestinationGlobalsToJSON(
  getTenantEventByDestinationGlobals: GetTenantEventByDestinationGlobals,
): string {
  return JSON.stringify(
    GetTenantEventByDestinationGlobals$outboundSchema.parse(
      getTenantEventByDestinationGlobals,
    ),
  );
}

export function getTenantEventByDestinationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantEventByDestinationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTenantEventByDestinationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantEventByDestinationGlobals' from JSON`,
  );
}

/** @internal */
export const GetTenantEventByDestinationRequest$inboundSchema: z.ZodType<
  GetTenantEventByDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  destination_id: z.string(),
  event_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "destination_id": "destinationId",
    "event_id": "eventId",
  });
});

/** @internal */
export type GetTenantEventByDestinationRequest$Outbound = {
  tenant_id?: string | undefined;
  destination_id: string;
  event_id: string;
};

/** @internal */
export const GetTenantEventByDestinationRequest$outboundSchema: z.ZodType<
  GetTenantEventByDestinationRequest$Outbound,
  z.ZodTypeDef,
  GetTenantEventByDestinationRequest
> = z.object({
  tenantId: z.string().optional(),
  destinationId: z.string(),
  eventId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    destinationId: "destination_id",
    eventId: "event_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantEventByDestinationRequest$ {
  /** @deprecated use `GetTenantEventByDestinationRequest$inboundSchema` instead. */
  export const inboundSchema = GetTenantEventByDestinationRequest$inboundSchema;
  /** @deprecated use `GetTenantEventByDestinationRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetTenantEventByDestinationRequest$outboundSchema;
  /** @deprecated use `GetTenantEventByDestinationRequest$Outbound` instead. */
  export type Outbound = GetTenantEventByDestinationRequest$Outbound;
}

export function getTenantEventByDestinationRequestToJSON(
  getTenantEventByDestinationRequest: GetTenantEventByDestinationRequest,
): string {
  return JSON.stringify(
    GetTenantEventByDestinationRequest$outboundSchema.parse(
      getTenantEventByDestinationRequest,
    ),
  );
}

export function getTenantEventByDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantEventByDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTenantEventByDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantEventByDestinationRequest' from JSON`,
  );
}
