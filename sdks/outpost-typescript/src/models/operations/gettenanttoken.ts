/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTenantTokenGlobals = {
  tenantId?: string | undefined;
};

export type GetTenantTokenRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
};

/** @internal */
export const GetTenantTokenGlobals$inboundSchema: z.ZodType<
  GetTenantTokenGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type GetTenantTokenGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const GetTenantTokenGlobals$outboundSchema: z.ZodType<
  GetTenantTokenGlobals$Outbound,
  z.ZodTypeDef,
  GetTenantTokenGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantTokenGlobals$ {
  /** @deprecated use `GetTenantTokenGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTenantTokenGlobals$inboundSchema;
  /** @deprecated use `GetTenantTokenGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTenantTokenGlobals$outboundSchema;
  /** @deprecated use `GetTenantTokenGlobals$Outbound` instead. */
  export type Outbound = GetTenantTokenGlobals$Outbound;
}

export function getTenantTokenGlobalsToJSON(
  getTenantTokenGlobals: GetTenantTokenGlobals,
): string {
  return JSON.stringify(
    GetTenantTokenGlobals$outboundSchema.parse(getTenantTokenGlobals),
  );
}

export function getTenantTokenGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantTokenGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTenantTokenGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantTokenGlobals' from JSON`,
  );
}

/** @internal */
export const GetTenantTokenRequest$inboundSchema: z.ZodType<
  GetTenantTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type GetTenantTokenRequest$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const GetTenantTokenRequest$outboundSchema: z.ZodType<
  GetTenantTokenRequest$Outbound,
  z.ZodTypeDef,
  GetTenantTokenRequest
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantTokenRequest$ {
  /** @deprecated use `GetTenantTokenRequest$inboundSchema` instead. */
  export const inboundSchema = GetTenantTokenRequest$inboundSchema;
  /** @deprecated use `GetTenantTokenRequest$outboundSchema` instead. */
  export const outboundSchema = GetTenantTokenRequest$outboundSchema;
  /** @deprecated use `GetTenantTokenRequest$Outbound` instead. */
  export type Outbound = GetTenantTokenRequest$Outbound;
}

export function getTenantTokenRequestToJSON(
  getTenantTokenRequest: GetTenantTokenRequest,
): string {
  return JSON.stringify(
    GetTenantTokenRequest$outboundSchema.parse(getTenantTokenRequest),
  );
}

export function getTenantTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTenantTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantTokenRequest' from JSON`,
  );
}
