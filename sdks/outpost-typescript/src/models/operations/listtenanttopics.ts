/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTenantTopicsGlobals = {
  tenantId?: string | undefined;
};

export type ListTenantTopicsRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
};

/** @internal */
export const ListTenantTopicsGlobals$inboundSchema: z.ZodType<
  ListTenantTopicsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type ListTenantTopicsGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const ListTenantTopicsGlobals$outboundSchema: z.ZodType<
  ListTenantTopicsGlobals$Outbound,
  z.ZodTypeDef,
  ListTenantTopicsGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantTopicsGlobals$ {
  /** @deprecated use `ListTenantTopicsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListTenantTopicsGlobals$inboundSchema;
  /** @deprecated use `ListTenantTopicsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListTenantTopicsGlobals$outboundSchema;
  /** @deprecated use `ListTenantTopicsGlobals$Outbound` instead. */
  export type Outbound = ListTenantTopicsGlobals$Outbound;
}

export function listTenantTopicsGlobalsToJSON(
  listTenantTopicsGlobals: ListTenantTopicsGlobals,
): string {
  return JSON.stringify(
    ListTenantTopicsGlobals$outboundSchema.parse(listTenantTopicsGlobals),
  );
}

export function listTenantTopicsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantTopicsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTenantTopicsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantTopicsGlobals' from JSON`,
  );
}

/** @internal */
export const ListTenantTopicsRequest$inboundSchema: z.ZodType<
  ListTenantTopicsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type ListTenantTopicsRequest$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const ListTenantTopicsRequest$outboundSchema: z.ZodType<
  ListTenantTopicsRequest$Outbound,
  z.ZodTypeDef,
  ListTenantTopicsRequest
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantTopicsRequest$ {
  /** @deprecated use `ListTenantTopicsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTenantTopicsRequest$inboundSchema;
  /** @deprecated use `ListTenantTopicsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTenantTopicsRequest$outboundSchema;
  /** @deprecated use `ListTenantTopicsRequest$Outbound` instead. */
  export type Outbound = ListTenantTopicsRequest$Outbound;
}

export function listTenantTopicsRequestToJSON(
  listTenantTopicsRequest: ListTenantTopicsRequest,
): string {
  return JSON.stringify(
    ListTenantTopicsRequest$outboundSchema.parse(listTenantTopicsRequest),
  );
}

export function listTenantTopicsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantTopicsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTenantTopicsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantTopicsRequest' from JSON`,
  );
}
