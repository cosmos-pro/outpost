/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetryTenantEventGlobals = {
  tenantId?: string | undefined;
};

export type RetryTenantEventRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the destination.
   */
  destinationId: string;
  /**
   * The ID of the event to retry.
   */
  eventId: string;
};

/** @internal */
export const RetryTenantEventGlobals$inboundSchema: z.ZodType<
  RetryTenantEventGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type RetryTenantEventGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const RetryTenantEventGlobals$outboundSchema: z.ZodType<
  RetryTenantEventGlobals$Outbound,
  z.ZodTypeDef,
  RetryTenantEventGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryTenantEventGlobals$ {
  /** @deprecated use `RetryTenantEventGlobals$inboundSchema` instead. */
  export const inboundSchema = RetryTenantEventGlobals$inboundSchema;
  /** @deprecated use `RetryTenantEventGlobals$outboundSchema` instead. */
  export const outboundSchema = RetryTenantEventGlobals$outboundSchema;
  /** @deprecated use `RetryTenantEventGlobals$Outbound` instead. */
  export type Outbound = RetryTenantEventGlobals$Outbound;
}

export function retryTenantEventGlobalsToJSON(
  retryTenantEventGlobals: RetryTenantEventGlobals,
): string {
  return JSON.stringify(
    RetryTenantEventGlobals$outboundSchema.parse(retryTenantEventGlobals),
  );
}

export function retryTenantEventGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<RetryTenantEventGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetryTenantEventGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetryTenantEventGlobals' from JSON`,
  );
}

/** @internal */
export const RetryTenantEventRequest$inboundSchema: z.ZodType<
  RetryTenantEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  destination_id: z.string(),
  event_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "destination_id": "destinationId",
    "event_id": "eventId",
  });
});

/** @internal */
export type RetryTenantEventRequest$Outbound = {
  tenant_id?: string | undefined;
  destination_id: string;
  event_id: string;
};

/** @internal */
export const RetryTenantEventRequest$outboundSchema: z.ZodType<
  RetryTenantEventRequest$Outbound,
  z.ZodTypeDef,
  RetryTenantEventRequest
> = z.object({
  tenantId: z.string().optional(),
  destinationId: z.string(),
  eventId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    destinationId: "destination_id",
    eventId: "event_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryTenantEventRequest$ {
  /** @deprecated use `RetryTenantEventRequest$inboundSchema` instead. */
  export const inboundSchema = RetryTenantEventRequest$inboundSchema;
  /** @deprecated use `RetryTenantEventRequest$outboundSchema` instead. */
  export const outboundSchema = RetryTenantEventRequest$outboundSchema;
  /** @deprecated use `RetryTenantEventRequest$Outbound` instead. */
  export type Outbound = RetryTenantEventRequest$Outbound;
}

export function retryTenantEventRequestToJSON(
  retryTenantEventRequest: RetryTenantEventRequest,
): string {
  return JSON.stringify(
    RetryTenantEventRequest$outboundSchema.parse(retryTenantEventRequest),
  );
}

export function retryTenantEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetryTenantEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetryTenantEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetryTenantEventRequest' from JSON`,
  );
}
