/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTenantEventGlobals = {
  tenantId?: string | undefined;
};

export type GetTenantEventRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the event.
   */
  eventId: string;
};

/** @internal */
export const GetTenantEventGlobals$inboundSchema: z.ZodType<
  GetTenantEventGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type GetTenantEventGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const GetTenantEventGlobals$outboundSchema: z.ZodType<
  GetTenantEventGlobals$Outbound,
  z.ZodTypeDef,
  GetTenantEventGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantEventGlobals$ {
  /** @deprecated use `GetTenantEventGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTenantEventGlobals$inboundSchema;
  /** @deprecated use `GetTenantEventGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTenantEventGlobals$outboundSchema;
  /** @deprecated use `GetTenantEventGlobals$Outbound` instead. */
  export type Outbound = GetTenantEventGlobals$Outbound;
}

export function getTenantEventGlobalsToJSON(
  getTenantEventGlobals: GetTenantEventGlobals,
): string {
  return JSON.stringify(
    GetTenantEventGlobals$outboundSchema.parse(getTenantEventGlobals),
  );
}

export function getTenantEventGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantEventGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTenantEventGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantEventGlobals' from JSON`,
  );
}

/** @internal */
export const GetTenantEventRequest$inboundSchema: z.ZodType<
  GetTenantEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  event_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "event_id": "eventId",
  });
});

/** @internal */
export type GetTenantEventRequest$Outbound = {
  tenant_id?: string | undefined;
  event_id: string;
};

/** @internal */
export const GetTenantEventRequest$outboundSchema: z.ZodType<
  GetTenantEventRequest$Outbound,
  z.ZodTypeDef,
  GetTenantEventRequest
> = z.object({
  tenantId: z.string().optional(),
  eventId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    eventId: "event_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantEventRequest$ {
  /** @deprecated use `GetTenantEventRequest$inboundSchema` instead. */
  export const inboundSchema = GetTenantEventRequest$inboundSchema;
  /** @deprecated use `GetTenantEventRequest$outboundSchema` instead. */
  export const outboundSchema = GetTenantEventRequest$outboundSchema;
  /** @deprecated use `GetTenantEventRequest$Outbound` instead. */
  export type Outbound = GetTenantEventRequest$Outbound;
}

export function getTenantEventRequestToJSON(
  getTenantEventRequest: GetTenantEventRequest,
): string {
  return JSON.stringify(
    GetTenantEventRequest$outboundSchema.parse(getTenantEventRequest),
  );
}

export function getTenantEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTenantEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantEventRequest' from JSON`,
  );
}
