/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DisableTenantDestinationGlobals = {
  tenantId?: string | undefined;
};

export type DisableTenantDestinationRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the destination.
   */
  destinationId: string;
};

/** @internal */
export const DisableTenantDestinationGlobals$inboundSchema: z.ZodType<
  DisableTenantDestinationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type DisableTenantDestinationGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const DisableTenantDestinationGlobals$outboundSchema: z.ZodType<
  DisableTenantDestinationGlobals$Outbound,
  z.ZodTypeDef,
  DisableTenantDestinationGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableTenantDestinationGlobals$ {
  /** @deprecated use `DisableTenantDestinationGlobals$inboundSchema` instead. */
  export const inboundSchema = DisableTenantDestinationGlobals$inboundSchema;
  /** @deprecated use `DisableTenantDestinationGlobals$outboundSchema` instead. */
  export const outboundSchema = DisableTenantDestinationGlobals$outboundSchema;
  /** @deprecated use `DisableTenantDestinationGlobals$Outbound` instead. */
  export type Outbound = DisableTenantDestinationGlobals$Outbound;
}

export function disableTenantDestinationGlobalsToJSON(
  disableTenantDestinationGlobals: DisableTenantDestinationGlobals,
): string {
  return JSON.stringify(
    DisableTenantDestinationGlobals$outboundSchema.parse(
      disableTenantDestinationGlobals,
    ),
  );
}

export function disableTenantDestinationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DisableTenantDestinationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableTenantDestinationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableTenantDestinationGlobals' from JSON`,
  );
}

/** @internal */
export const DisableTenantDestinationRequest$inboundSchema: z.ZodType<
  DisableTenantDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  destination_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "destination_id": "destinationId",
  });
});

/** @internal */
export type DisableTenantDestinationRequest$Outbound = {
  tenant_id?: string | undefined;
  destination_id: string;
};

/** @internal */
export const DisableTenantDestinationRequest$outboundSchema: z.ZodType<
  DisableTenantDestinationRequest$Outbound,
  z.ZodTypeDef,
  DisableTenantDestinationRequest
> = z.object({
  tenantId: z.string().optional(),
  destinationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    destinationId: "destination_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisableTenantDestinationRequest$ {
  /** @deprecated use `DisableTenantDestinationRequest$inboundSchema` instead. */
  export const inboundSchema = DisableTenantDestinationRequest$inboundSchema;
  /** @deprecated use `DisableTenantDestinationRequest$outboundSchema` instead. */
  export const outboundSchema = DisableTenantDestinationRequest$outboundSchema;
  /** @deprecated use `DisableTenantDestinationRequest$Outbound` instead. */
  export type Outbound = DisableTenantDestinationRequest$Outbound;
}

export function disableTenantDestinationRequestToJSON(
  disableTenantDestinationRequest: DisableTenantDestinationRequest,
): string {
  return JSON.stringify(
    DisableTenantDestinationRequest$outboundSchema.parse(
      disableTenantDestinationRequest,
    ),
  );
}

export function disableTenantDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DisableTenantDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisableTenantDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisableTenantDestinationRequest' from JSON`,
  );
}
