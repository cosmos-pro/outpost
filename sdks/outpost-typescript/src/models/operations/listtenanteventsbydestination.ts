/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTenantEventsByDestinationGlobals = {
  tenantId?: string | undefined;
};

/**
 * Filter events by delivery status.
 */
export const ListTenantEventsByDestinationStatus = {
  Success: "success",
  Failed: "failed",
} as const;
/**
 * Filter events by delivery status.
 */
export type ListTenantEventsByDestinationStatus = ClosedEnum<
  typeof ListTenantEventsByDestinationStatus
>;

export type ListTenantEventsByDestinationRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the destination.
   */
  destinationId: string;
  /**
   * Filter events by delivery status.
   */
  status?: ListTenantEventsByDestinationStatus | undefined;
};

/** @internal */
export const ListTenantEventsByDestinationGlobals$inboundSchema: z.ZodType<
  ListTenantEventsByDestinationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type ListTenantEventsByDestinationGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const ListTenantEventsByDestinationGlobals$outboundSchema: z.ZodType<
  ListTenantEventsByDestinationGlobals$Outbound,
  z.ZodTypeDef,
  ListTenantEventsByDestinationGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsByDestinationGlobals$ {
  /** @deprecated use `ListTenantEventsByDestinationGlobals$inboundSchema` instead. */
  export const inboundSchema =
    ListTenantEventsByDestinationGlobals$inboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationGlobals$outboundSchema` instead. */
  export const outboundSchema =
    ListTenantEventsByDestinationGlobals$outboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationGlobals$Outbound` instead. */
  export type Outbound = ListTenantEventsByDestinationGlobals$Outbound;
}

export function listTenantEventsByDestinationGlobalsToJSON(
  listTenantEventsByDestinationGlobals: ListTenantEventsByDestinationGlobals,
): string {
  return JSON.stringify(
    ListTenantEventsByDestinationGlobals$outboundSchema.parse(
      listTenantEventsByDestinationGlobals,
    ),
  );
}

export function listTenantEventsByDestinationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantEventsByDestinationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListTenantEventsByDestinationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantEventsByDestinationGlobals' from JSON`,
  );
}

/** @internal */
export const ListTenantEventsByDestinationStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListTenantEventsByDestinationStatus
> = z.nativeEnum(ListTenantEventsByDestinationStatus);

/** @internal */
export const ListTenantEventsByDestinationStatus$outboundSchema:
  z.ZodNativeEnum<typeof ListTenantEventsByDestinationStatus> =
    ListTenantEventsByDestinationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsByDestinationStatus$ {
  /** @deprecated use `ListTenantEventsByDestinationStatus$inboundSchema` instead. */
  export const inboundSchema =
    ListTenantEventsByDestinationStatus$inboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationStatus$outboundSchema` instead. */
  export const outboundSchema =
    ListTenantEventsByDestinationStatus$outboundSchema;
}

/** @internal */
export const ListTenantEventsByDestinationRequest$inboundSchema: z.ZodType<
  ListTenantEventsByDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  destination_id: z.string(),
  status: ListTenantEventsByDestinationStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "destination_id": "destinationId",
  });
});

/** @internal */
export type ListTenantEventsByDestinationRequest$Outbound = {
  tenant_id?: string | undefined;
  destination_id: string;
  status?: string | undefined;
};

/** @internal */
export const ListTenantEventsByDestinationRequest$outboundSchema: z.ZodType<
  ListTenantEventsByDestinationRequest$Outbound,
  z.ZodTypeDef,
  ListTenantEventsByDestinationRequest
> = z.object({
  tenantId: z.string().optional(),
  destinationId: z.string(),
  status: ListTenantEventsByDestinationStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    destinationId: "destination_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsByDestinationRequest$ {
  /** @deprecated use `ListTenantEventsByDestinationRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListTenantEventsByDestinationRequest$inboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListTenantEventsByDestinationRequest$outboundSchema;
  /** @deprecated use `ListTenantEventsByDestinationRequest$Outbound` instead. */
  export type Outbound = ListTenantEventsByDestinationRequest$Outbound;
}

export function listTenantEventsByDestinationRequestToJSON(
  listTenantEventsByDestinationRequest: ListTenantEventsByDestinationRequest,
): string {
  return JSON.stringify(
    ListTenantEventsByDestinationRequest$outboundSchema.parse(
      listTenantEventsByDestinationRequest,
    ),
  );
}

export function listTenantEventsByDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantEventsByDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListTenantEventsByDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantEventsByDestinationRequest' from JSON`,
  );
}
