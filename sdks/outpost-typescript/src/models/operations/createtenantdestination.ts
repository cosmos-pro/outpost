/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTenantDestinationGlobals = {
  tenantId?: string | undefined;
};

export type CreateTenantDestinationRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  destinationCreate: components.DestinationCreate;
};

/** @internal */
export const CreateTenantDestinationGlobals$inboundSchema: z.ZodType<
  CreateTenantDestinationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type CreateTenantDestinationGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const CreateTenantDestinationGlobals$outboundSchema: z.ZodType<
  CreateTenantDestinationGlobals$Outbound,
  z.ZodTypeDef,
  CreateTenantDestinationGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTenantDestinationGlobals$ {
  /** @deprecated use `CreateTenantDestinationGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateTenantDestinationGlobals$inboundSchema;
  /** @deprecated use `CreateTenantDestinationGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateTenantDestinationGlobals$outboundSchema;
  /** @deprecated use `CreateTenantDestinationGlobals$Outbound` instead. */
  export type Outbound = CreateTenantDestinationGlobals$Outbound;
}

export function createTenantDestinationGlobalsToJSON(
  createTenantDestinationGlobals: CreateTenantDestinationGlobals,
): string {
  return JSON.stringify(
    CreateTenantDestinationGlobals$outboundSchema.parse(
      createTenantDestinationGlobals,
    ),
  );
}

export function createTenantDestinationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateTenantDestinationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTenantDestinationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTenantDestinationGlobals' from JSON`,
  );
}

/** @internal */
export const CreateTenantDestinationRequest$inboundSchema: z.ZodType<
  CreateTenantDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  DestinationCreate: components.DestinationCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "DestinationCreate": "destinationCreate",
  });
});

/** @internal */
export type CreateTenantDestinationRequest$Outbound = {
  tenant_id?: string | undefined;
  DestinationCreate: components.DestinationCreate$Outbound;
};

/** @internal */
export const CreateTenantDestinationRequest$outboundSchema: z.ZodType<
  CreateTenantDestinationRequest$Outbound,
  z.ZodTypeDef,
  CreateTenantDestinationRequest
> = z.object({
  tenantId: z.string().optional(),
  destinationCreate: components.DestinationCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    destinationCreate: "DestinationCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTenantDestinationRequest$ {
  /** @deprecated use `CreateTenantDestinationRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTenantDestinationRequest$inboundSchema;
  /** @deprecated use `CreateTenantDestinationRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTenantDestinationRequest$outboundSchema;
  /** @deprecated use `CreateTenantDestinationRequest$Outbound` instead. */
  export type Outbound = CreateTenantDestinationRequest$Outbound;
}

export function createTenantDestinationRequestToJSON(
  createTenantDestinationRequest: CreateTenantDestinationRequest,
): string {
  return JSON.stringify(
    CreateTenantDestinationRequest$outboundSchema.parse(
      createTenantDestinationRequest,
    ),
  );
}

export function createTenantDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTenantDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTenantDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTenantDestinationRequest' from JSON`,
  );
}
