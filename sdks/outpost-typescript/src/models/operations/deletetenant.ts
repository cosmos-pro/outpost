/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTenantGlobals = {
  tenantId?: string | undefined;
};

export type DeleteTenantRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
};

/** @internal */
export const DeleteTenantGlobals$inboundSchema: z.ZodType<
  DeleteTenantGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type DeleteTenantGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const DeleteTenantGlobals$outboundSchema: z.ZodType<
  DeleteTenantGlobals$Outbound,
  z.ZodTypeDef,
  DeleteTenantGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTenantGlobals$ {
  /** @deprecated use `DeleteTenantGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteTenantGlobals$inboundSchema;
  /** @deprecated use `DeleteTenantGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteTenantGlobals$outboundSchema;
  /** @deprecated use `DeleteTenantGlobals$Outbound` instead. */
  export type Outbound = DeleteTenantGlobals$Outbound;
}

export function deleteTenantGlobalsToJSON(
  deleteTenantGlobals: DeleteTenantGlobals,
): string {
  return JSON.stringify(
    DeleteTenantGlobals$outboundSchema.parse(deleteTenantGlobals),
  );
}

export function deleteTenantGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTenantGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTenantGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTenantGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteTenantRequest$inboundSchema: z.ZodType<
  DeleteTenantRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type DeleteTenantRequest$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const DeleteTenantRequest$outboundSchema: z.ZodType<
  DeleteTenantRequest$Outbound,
  z.ZodTypeDef,
  DeleteTenantRequest
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTenantRequest$ {
  /** @deprecated use `DeleteTenantRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTenantRequest$inboundSchema;
  /** @deprecated use `DeleteTenantRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTenantRequest$outboundSchema;
  /** @deprecated use `DeleteTenantRequest$Outbound` instead. */
  export type Outbound = DeleteTenantRequest$Outbound;
}

export function deleteTenantRequestToJSON(
  deleteTenantRequest: DeleteTenantRequest,
): string {
  return JSON.stringify(
    DeleteTenantRequest$outboundSchema.parse(deleteTenantRequest),
  );
}

export function deleteTenantRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTenantRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTenantRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTenantRequest' from JSON`,
  );
}
