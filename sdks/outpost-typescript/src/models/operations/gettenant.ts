/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTenantGlobals = {
  tenantId?: string | undefined;
};

export type GetTenantRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
};

/** @internal */
export const GetTenantGlobals$inboundSchema: z.ZodType<
  GetTenantGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type GetTenantGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const GetTenantGlobals$outboundSchema: z.ZodType<
  GetTenantGlobals$Outbound,
  z.ZodTypeDef,
  GetTenantGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantGlobals$ {
  /** @deprecated use `GetTenantGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTenantGlobals$inboundSchema;
  /** @deprecated use `GetTenantGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTenantGlobals$outboundSchema;
  /** @deprecated use `GetTenantGlobals$Outbound` instead. */
  export type Outbound = GetTenantGlobals$Outbound;
}

export function getTenantGlobalsToJSON(
  getTenantGlobals: GetTenantGlobals,
): string {
  return JSON.stringify(
    GetTenantGlobals$outboundSchema.parse(getTenantGlobals),
  );
}

export function getTenantGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTenantGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantGlobals' from JSON`,
  );
}

/** @internal */
export const GetTenantRequest$inboundSchema: z.ZodType<
  GetTenantRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type GetTenantRequest$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const GetTenantRequest$outboundSchema: z.ZodType<
  GetTenantRequest$Outbound,
  z.ZodTypeDef,
  GetTenantRequest
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantRequest$ {
  /** @deprecated use `GetTenantRequest$inboundSchema` instead. */
  export const inboundSchema = GetTenantRequest$inboundSchema;
  /** @deprecated use `GetTenantRequest$outboundSchema` instead. */
  export const outboundSchema = GetTenantRequest$outboundSchema;
  /** @deprecated use `GetTenantRequest$Outbound` instead. */
  export type Outbound = GetTenantRequest$Outbound;
}

export function getTenantRequestToJSON(
  getTenantRequest: GetTenantRequest,
): string {
  return JSON.stringify(
    GetTenantRequest$outboundSchema.parse(getTenantRequest),
  );
}

export function getTenantRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTenantRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantRequest' from JSON`,
  );
}
