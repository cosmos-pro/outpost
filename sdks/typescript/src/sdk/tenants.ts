/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tenantsDelete } from "../funcs/tenantsDelete.js";
import { tenantsGet } from "../funcs/tenantsGet.js";
import { tenantsGetPortalUrl } from "../funcs/tenantsGetPortalUrl.js";
import { tenantsGetPortalUrlJwtContext } from "../funcs/tenantsGetPortalUrlJwtContext.js";
import { tenantsGetToken } from "../funcs/tenantsGetToken.js";
import { tenantsGetTokenJwtContext } from "../funcs/tenantsGetTokenJwtContext.js";
import { tenantsUpsert } from "../funcs/tenantsUpsert.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tenants extends ClientSDK {
  /**
   * Create or Update Tenant
   *
   * @remarks
   * Idempotently creates or updates a tenant. Required before associating destinations.
   */
  async upsert(
    request: operations.UpsertTenantRequest,
    options?: RequestOptions,
  ): Promise<components.Tenant> {
    return unwrapAsync(tenantsUpsert(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Tenant
   *
   * @remarks
   * Retrieves details for a specific tenant.
   */
  async get(
    security: operations.GetTenantSecurity,
    request: operations.GetTenantRequest,
    options?: RequestOptions,
  ): Promise<components.Tenant> {
    return unwrapAsync(tenantsGet(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete Tenant
   *
   * @remarks
   * Deletes the tenant and all associated destinations.
   */
  async delete(
    security: operations.DeleteTenantSecurity,
    request: operations.DeleteTenantRequest,
    options?: RequestOptions,
  ): Promise<components.SuccessResponse> {
    return unwrapAsync(tenantsDelete(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Portal Redirect URL
   *
   * @remarks
   * Returns a redirect URL containing a JWT to authenticate the user with the portal.
   */
  async getPortalUrl(
    request: operations.GetTenantPortalUrlRequest,
    options?: RequestOptions,
  ): Promise<components.PortalRedirect> {
    return unwrapAsync(tenantsGetPortalUrl(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Tenant JWT Token
   *
   * @remarks
   * Returns a JWT token scoped to the tenant for safe browser API calls.
   */
  async getToken(
    request: operations.GetTenantTokenRequest,
    options?: RequestOptions,
  ): Promise<components.TenantToken> {
    return unwrapAsync(tenantsGetToken(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Portal Redirect URL (JWT Auth Context)
   *
   * @remarks
   * Returns a redirect URL containing a JWT to authenticate the user with the portal (infers tenant from JWT). Requires Admin API Key.
   */
  async getPortalUrlJwtContext(
    request: operations.GetPortalUrlJwtContextRequest,
    options?: RequestOptions,
  ): Promise<components.PortalRedirect> {
    return unwrapAsync(tenantsGetPortalUrlJwtContext(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Tenant JWT Token (JWT Auth Context)
   *
   * @remarks
   * Returns a JWT token scoped to the tenant (infers tenant from JWT). Requires Admin API Key.
   */
  async getTokenJwtContext(
    options?: RequestOptions,
  ): Promise<components.TenantToken> {
    return unwrapAsync(tenantsGetTokenJwtContext(
      this,
      options,
    ));
  }
}
