/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventsGet } from "../funcs/eventsGet.js";
import { eventsGetByDestination } from "../funcs/eventsGetByDestination.js";
import { eventsList } from "../funcs/eventsList.js";
import { eventsListByDestination } from "../funcs/eventsListByDestination.js";
import { eventsListDeliveries } from "../funcs/eventsListDeliveries.js";
import { eventsRetry } from "../funcs/eventsRetry.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Events extends ClientSDK {
  /**
   * List Events
   *
   * @remarks
   * Retrieves a list of events for the tenant, supporting cursor navigation (details TBD) and filtering.
   */
  async list(
    security: operations.ListTenantEventsSecurity,
    request: operations.ListTenantEventsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Event>> {
    return unwrapAsync(eventsList(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Event
   *
   * @remarks
   * Retrieves details for a specific event.
   */
  async get(
    security: operations.GetTenantEventSecurity,
    request: operations.GetTenantEventRequest,
    options?: RequestOptions,
  ): Promise<components.Event> {
    return unwrapAsync(eventsGet(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * List Event Delivery Attempts
   *
   * @remarks
   * Retrieves a list of delivery attempts for a specific event, including response details.
   */
  async listDeliveries(
    security: operations.ListTenantEventDeliveriesSecurity,
    request: operations.ListTenantEventDeliveriesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.DeliveryAttempt>> {
    return unwrapAsync(eventsListDeliveries(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * List Events by Destination
   *
   * @remarks
   * Retrieves events associated with a specific destination for the tenant.
   */
  async listByDestination(
    security: operations.ListTenantEventsByDestinationSecurity,
    request: operations.ListTenantEventsByDestinationRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Event>> {
    return unwrapAsync(eventsListByDestination(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Event by Destination
   *
   * @remarks
   * Retrieves a specific event associated with a specific destination for the tenant.
   */
  async getByDestination(
    security: operations.GetTenantEventByDestinationSecurity,
    request: operations.GetTenantEventByDestinationRequest,
    options?: RequestOptions,
  ): Promise<components.Event> {
    return unwrapAsync(eventsGetByDestination(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Retry Event Delivery
   *
   * @remarks
   * Triggers a retry for a failed event delivery.
   */
  async retry(
    security: operations.RetryTenantEventSecurity,
    request: operations.RetryTenantEventRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(eventsRetry(
      this,
      security,
      request,
      options,
    ));
  }
}
