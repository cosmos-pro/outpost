/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { schemasGet } from "../funcs/schemasGet.js";
import { schemasGetDestinationTypeJwt } from "../funcs/schemasGetDestinationTypeJwt.js";
import { schemasListDestinationTypesJwt } from "../funcs/schemasListDestinationTypesJwt.js";
import { schemasListTenantDestinationTypes } from "../funcs/schemasListTenantDestinationTypes.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Schemas extends ClientSDK {
  /**
   * List Destination Type Schemas (for Tenant)
   *
   * @remarks
   * Returns a list of JSON-based input schemas for each available destination type. Requires Admin API Key or Tenant JWT.
   */
  async listTenantDestinationTypes(
    security: operations.ListTenantDestinationTypeSchemasSecurity,
    request: operations.ListTenantDestinationTypeSchemasRequest,
    options?: RequestOptions,
  ): Promise<Array<components.DestinationTypeSchema>> {
    return unwrapAsync(schemasListTenantDestinationTypes(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Destination Type Schema (for Tenant)
   *
   * @remarks
   * Returns the input schema for a specific destination type. Requires Admin API Key or Tenant JWT.
   */
  async get(
    security: operations.GetTenantDestinationTypeSchemaSecurity,
    request: operations.GetTenantDestinationTypeSchemaRequest,
    options?: RequestOptions,
  ): Promise<components.DestinationTypeSchema> {
    return unwrapAsync(schemasGet(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * List Destination Type Schemas (JWT Auth)
   *
   * @remarks
   * Returns a list of JSON-based input schemas for each available destination type (infers tenant from JWT).
   */
  async listDestinationTypesJwt(
    security: operations.ListDestinationTypeSchemasJwtSecurity,
    options?: RequestOptions,
  ): Promise<Array<components.DestinationTypeSchema>> {
    return unwrapAsync(schemasListDestinationTypesJwt(
      this,
      security,
      options,
    ));
  }

  /**
   * Get Destination Type Schema (JWT Auth)
   *
   * @remarks
   * Returns the input schema for a specific destination type (infers tenant from JWT).
   */
  async getDestinationTypeJwt(
    security: operations.GetDestinationTypeSchemaJwtSecurity,
    request: operations.GetDestinationTypeSchemaJwtRequest,
    options?: RequestOptions,
  ): Promise<components.DestinationTypeSchema> {
    return unwrapAsync(schemasGetDestinationTypeJwt(
      this,
      security,
      request,
      options,
    ));
  }
}
