/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AWSSQSConfig = {
  /**
   * Optional. Custom AWS endpoint URL (e.g., for LocalStack or specific regions).
   */
  endpoint?: string | undefined;
  /**
   * The URL of the SQS queue.
   */
  queueUrl: string;
};

/** @internal */
export const AWSSQSConfig$inboundSchema: z.ZodType<
  AWSSQSConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  endpoint: z.string().optional(),
  queue_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "queue_url": "queueUrl",
  });
});

/** @internal */
export type AWSSQSConfig$Outbound = {
  endpoint?: string | undefined;
  queue_url: string;
};

/** @internal */
export const AWSSQSConfig$outboundSchema: z.ZodType<
  AWSSQSConfig$Outbound,
  z.ZodTypeDef,
  AWSSQSConfig
> = z.object({
  endpoint: z.string().optional(),
  queueUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    queueUrl: "queue_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AWSSQSConfig$ {
  /** @deprecated use `AWSSQSConfig$inboundSchema` instead. */
  export const inboundSchema = AWSSQSConfig$inboundSchema;
  /** @deprecated use `AWSSQSConfig$outboundSchema` instead. */
  export const outboundSchema = AWSSQSConfig$outboundSchema;
  /** @deprecated use `AWSSQSConfig$Outbound` instead. */
  export type Outbound = AWSSQSConfig$Outbound;
}

export function awssqsConfigToJSON(awssqsConfig: AWSSQSConfig): string {
  return JSON.stringify(AWSSQSConfig$outboundSchema.parse(awssqsConfig));
}

export function awssqsConfigFromJSON(
  jsonString: string,
): SafeParseResult<AWSSQSConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AWSSQSConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AWSSQSConfig' from JSON`,
  );
}
