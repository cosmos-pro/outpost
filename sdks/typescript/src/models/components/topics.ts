/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TopicsEnum = {
  Wildcard: "*",
} as const;
export type TopicsEnum = ClosedEnum<typeof TopicsEnum>;

/**
 * "*" or an array of enabled topics.
 */
export type Topics = TopicsEnum | Array<string>;

/** @internal */
export const TopicsEnum$inboundSchema: z.ZodNativeEnum<typeof TopicsEnum> = z
  .nativeEnum(TopicsEnum);

/** @internal */
export const TopicsEnum$outboundSchema: z.ZodNativeEnum<typeof TopicsEnum> =
  TopicsEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsEnum$ {
  /** @deprecated use `TopicsEnum$inboundSchema` instead. */
  export const inboundSchema = TopicsEnum$inboundSchema;
  /** @deprecated use `TopicsEnum$outboundSchema` instead. */
  export const outboundSchema = TopicsEnum$outboundSchema;
}

/** @internal */
export const Topics$inboundSchema: z.ZodType<Topics, z.ZodTypeDef, unknown> = z
  .union([TopicsEnum$inboundSchema, z.array(z.string())]);

/** @internal */
export type Topics$Outbound = string | Array<string>;

/** @internal */
export const Topics$outboundSchema: z.ZodType<
  Topics$Outbound,
  z.ZodTypeDef,
  Topics
> = z.union([TopicsEnum$outboundSchema, z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Topics$ {
  /** @deprecated use `Topics$inboundSchema` instead. */
  export const inboundSchema = Topics$inboundSchema;
  /** @deprecated use `Topics$outboundSchema` instead. */
  export const outboundSchema = Topics$outboundSchema;
  /** @deprecated use `Topics$Outbound` instead. */
  export type Outbound = Topics$Outbound;
}

export function topicsToJSON(topics: Topics): string {
  return JSON.stringify(Topics$outboundSchema.parse(topics));
}

export function topicsFromJSON(
  jsonString: string,
): SafeParseResult<Topics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Topics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Topics' from JSON`,
  );
}
