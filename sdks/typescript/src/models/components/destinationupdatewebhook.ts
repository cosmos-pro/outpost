/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";
import {
  WebhookConfig,
  WebhookConfig$inboundSchema,
  WebhookConfig$Outbound,
  WebhookConfig$outboundSchema,
} from "./webhookconfig.js";
import {
  WebhookCredentialsUpdate,
  WebhookCredentialsUpdate$inboundSchema,
  WebhookCredentialsUpdate$Outbound,
  WebhookCredentialsUpdate$outboundSchema,
} from "./webhookcredentialsupdate.js";

export type DestinationUpdateWebhook = {
  /**
   * "*" or an array of enabled topics.
   */
  topics?: Topics | undefined;
  config?: WebhookConfig | undefined;
  credentials?: WebhookCredentialsUpdate | undefined;
};

/** @internal */
export const DestinationUpdateWebhook$inboundSchema: z.ZodType<
  DestinationUpdateWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  topics: Topics$inboundSchema.optional(),
  config: WebhookConfig$inboundSchema.optional(),
  credentials: WebhookCredentialsUpdate$inboundSchema.optional(),
});

/** @internal */
export type DestinationUpdateWebhook$Outbound = {
  topics?: Topics$Outbound | undefined;
  config?: WebhookConfig$Outbound | undefined;
  credentials?: WebhookCredentialsUpdate$Outbound | undefined;
};

/** @internal */
export const DestinationUpdateWebhook$outboundSchema: z.ZodType<
  DestinationUpdateWebhook$Outbound,
  z.ZodTypeDef,
  DestinationUpdateWebhook
> = z.object({
  topics: Topics$outboundSchema.optional(),
  config: WebhookConfig$outboundSchema.optional(),
  credentials: WebhookCredentialsUpdate$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationUpdateWebhook$ {
  /** @deprecated use `DestinationUpdateWebhook$inboundSchema` instead. */
  export const inboundSchema = DestinationUpdateWebhook$inboundSchema;
  /** @deprecated use `DestinationUpdateWebhook$outboundSchema` instead. */
  export const outboundSchema = DestinationUpdateWebhook$outboundSchema;
  /** @deprecated use `DestinationUpdateWebhook$Outbound` instead. */
  export type Outbound = DestinationUpdateWebhook$Outbound;
}

export function destinationUpdateWebhookToJSON(
  destinationUpdateWebhook: DestinationUpdateWebhook,
): string {
  return JSON.stringify(
    DestinationUpdateWebhook$outboundSchema.parse(destinationUpdateWebhook),
  );
}

export function destinationUpdateWebhookFromJSON(
  jsonString: string,
): SafeParseResult<DestinationUpdateWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationUpdateWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationUpdateWebhook' from JSON`,
  );
}
