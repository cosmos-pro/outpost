/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RabbitMQConfig,
  RabbitMQConfig$inboundSchema,
  RabbitMQConfig$Outbound,
  RabbitMQConfig$outboundSchema,
} from "./rabbitmqconfig.js";
import {
  RabbitMQCredentials,
  RabbitMQCredentials$inboundSchema,
  RabbitMQCredentials$Outbound,
  RabbitMQCredentials$outboundSchema,
} from "./rabbitmqcredentials.js";
import {
  Topics,
  Topics$inboundSchema,
  Topics$Outbound,
  Topics$outboundSchema,
} from "./topics.js";

/**
 * Type of the destination. Must be 'rabbitmq'.
 */
export const DestinationCreateRabbitMQType = {
  Rabbitmq: "rabbitmq",
} as const;
/**
 * Type of the destination. Must be 'rabbitmq'.
 */
export type DestinationCreateRabbitMQType = ClosedEnum<
  typeof DestinationCreateRabbitMQType
>;

export type DestinationCreateRabbitMQ = {
  /**
   * Optional user-provided ID. A UUID will be generated if empty.
   */
  id?: string | undefined;
  /**
   * Type of the destination. Must be 'rabbitmq'.
   */
  type: DestinationCreateRabbitMQType;
  /**
   * "*" or an array of enabled topics.
   */
  topics: Topics;
  config: RabbitMQConfig;
  credentials: RabbitMQCredentials;
};

/** @internal */
export const DestinationCreateRabbitMQType$inboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateRabbitMQType
> = z.nativeEnum(DestinationCreateRabbitMQType);

/** @internal */
export const DestinationCreateRabbitMQType$outboundSchema: z.ZodNativeEnum<
  typeof DestinationCreateRabbitMQType
> = DestinationCreateRabbitMQType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateRabbitMQType$ {
  /** @deprecated use `DestinationCreateRabbitMQType$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateRabbitMQType$inboundSchema;
  /** @deprecated use `DestinationCreateRabbitMQType$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateRabbitMQType$outboundSchema;
}

/** @internal */
export const DestinationCreateRabbitMQ$inboundSchema: z.ZodType<
  DestinationCreateRabbitMQ,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateRabbitMQType$inboundSchema,
  topics: Topics$inboundSchema,
  config: RabbitMQConfig$inboundSchema,
  credentials: RabbitMQCredentials$inboundSchema,
});

/** @internal */
export type DestinationCreateRabbitMQ$Outbound = {
  id?: string | undefined;
  type: string;
  topics: Topics$Outbound;
  config: RabbitMQConfig$Outbound;
  credentials: RabbitMQCredentials$Outbound;
};

/** @internal */
export const DestinationCreateRabbitMQ$outboundSchema: z.ZodType<
  DestinationCreateRabbitMQ$Outbound,
  z.ZodTypeDef,
  DestinationCreateRabbitMQ
> = z.object({
  id: z.string().optional(),
  type: DestinationCreateRabbitMQType$outboundSchema,
  topics: Topics$outboundSchema,
  config: RabbitMQConfig$outboundSchema,
  credentials: RabbitMQCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationCreateRabbitMQ$ {
  /** @deprecated use `DestinationCreateRabbitMQ$inboundSchema` instead. */
  export const inboundSchema = DestinationCreateRabbitMQ$inboundSchema;
  /** @deprecated use `DestinationCreateRabbitMQ$outboundSchema` instead. */
  export const outboundSchema = DestinationCreateRabbitMQ$outboundSchema;
  /** @deprecated use `DestinationCreateRabbitMQ$Outbound` instead. */
  export type Outbound = DestinationCreateRabbitMQ$Outbound;
}

export function destinationCreateRabbitMQToJSON(
  destinationCreateRabbitMQ: DestinationCreateRabbitMQ,
): string {
  return JSON.stringify(
    DestinationCreateRabbitMQ$outboundSchema.parse(destinationCreateRabbitMQ),
  );
}

export function destinationCreateRabbitMQFromJSON(
  jsonString: string,
): SafeParseResult<DestinationCreateRabbitMQ, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationCreateRabbitMQ$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationCreateRabbitMQ' from JSON`,
  );
}
