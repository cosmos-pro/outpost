/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTenantEventsGlobals = {
  tenantId?: string | undefined;
};

export type ListTenantEventsSecurity = {
  adminApiKey?: string | undefined;
  tenantJwt?: string | undefined;
};

/**
 * Filter events by destination ID(s).
 */
export type DestinationId = string | Array<string>;

/**
 * Filter events by delivery status.
 */
export const ListTenantEventsStatus = {
  Success: "success",
  Failed: "failed",
} as const;
/**
 * Filter events by delivery status.
 */
export type ListTenantEventsStatus = ClosedEnum<typeof ListTenantEventsStatus>;

export type ListTenantEventsRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * Filter events by destination ID(s).
   */
  destinationId?: string | Array<string> | undefined;
  /**
   * Filter events by delivery status.
   */
  status?: ListTenantEventsStatus | undefined;
};

/** @internal */
export const ListTenantEventsGlobals$inboundSchema: z.ZodType<
  ListTenantEventsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type ListTenantEventsGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const ListTenantEventsGlobals$outboundSchema: z.ZodType<
  ListTenantEventsGlobals$Outbound,
  z.ZodTypeDef,
  ListTenantEventsGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsGlobals$ {
  /** @deprecated use `ListTenantEventsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListTenantEventsGlobals$inboundSchema;
  /** @deprecated use `ListTenantEventsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListTenantEventsGlobals$outboundSchema;
  /** @deprecated use `ListTenantEventsGlobals$Outbound` instead. */
  export type Outbound = ListTenantEventsGlobals$Outbound;
}

export function listTenantEventsGlobalsToJSON(
  listTenantEventsGlobals: ListTenantEventsGlobals,
): string {
  return JSON.stringify(
    ListTenantEventsGlobals$outboundSchema.parse(listTenantEventsGlobals),
  );
}

export function listTenantEventsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantEventsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTenantEventsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantEventsGlobals' from JSON`,
  );
}

/** @internal */
export const ListTenantEventsSecurity$inboundSchema: z.ZodType<
  ListTenantEventsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  AdminApiKey: z.string().optional(),
  TenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "AdminApiKey": "adminApiKey",
    "TenantJwt": "tenantJwt",
  });
});

/** @internal */
export type ListTenantEventsSecurity$Outbound = {
  AdminApiKey?: string | undefined;
  TenantJwt?: string | undefined;
};

/** @internal */
export const ListTenantEventsSecurity$outboundSchema: z.ZodType<
  ListTenantEventsSecurity$Outbound,
  z.ZodTypeDef,
  ListTenantEventsSecurity
> = z.object({
  adminApiKey: z.string().optional(),
  tenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    adminApiKey: "AdminApiKey",
    tenantJwt: "TenantJwt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsSecurity$ {
  /** @deprecated use `ListTenantEventsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListTenantEventsSecurity$inboundSchema;
  /** @deprecated use `ListTenantEventsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListTenantEventsSecurity$outboundSchema;
  /** @deprecated use `ListTenantEventsSecurity$Outbound` instead. */
  export type Outbound = ListTenantEventsSecurity$Outbound;
}

export function listTenantEventsSecurityToJSON(
  listTenantEventsSecurity: ListTenantEventsSecurity,
): string {
  return JSON.stringify(
    ListTenantEventsSecurity$outboundSchema.parse(listTenantEventsSecurity),
  );
}

export function listTenantEventsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantEventsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTenantEventsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantEventsSecurity' from JSON`,
  );
}

/** @internal */
export const DestinationId$inboundSchema: z.ZodType<
  DestinationId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type DestinationId$Outbound = string | Array<string>;

/** @internal */
export const DestinationId$outboundSchema: z.ZodType<
  DestinationId$Outbound,
  z.ZodTypeDef,
  DestinationId
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationId$ {
  /** @deprecated use `DestinationId$inboundSchema` instead. */
  export const inboundSchema = DestinationId$inboundSchema;
  /** @deprecated use `DestinationId$outboundSchema` instead. */
  export const outboundSchema = DestinationId$outboundSchema;
  /** @deprecated use `DestinationId$Outbound` instead. */
  export type Outbound = DestinationId$Outbound;
}

export function destinationIdToJSON(destinationId: DestinationId): string {
  return JSON.stringify(DestinationId$outboundSchema.parse(destinationId));
}

export function destinationIdFromJSON(
  jsonString: string,
): SafeParseResult<DestinationId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationId' from JSON`,
  );
}

/** @internal */
export const ListTenantEventsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListTenantEventsStatus
> = z.nativeEnum(ListTenantEventsStatus);

/** @internal */
export const ListTenantEventsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListTenantEventsStatus
> = ListTenantEventsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsStatus$ {
  /** @deprecated use `ListTenantEventsStatus$inboundSchema` instead. */
  export const inboundSchema = ListTenantEventsStatus$inboundSchema;
  /** @deprecated use `ListTenantEventsStatus$outboundSchema` instead. */
  export const outboundSchema = ListTenantEventsStatus$outboundSchema;
}

/** @internal */
export const ListTenantEventsRequest$inboundSchema: z.ZodType<
  ListTenantEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  destination_id: z.union([z.string(), z.array(z.string())]).optional(),
  status: ListTenantEventsStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "destination_id": "destinationId",
  });
});

/** @internal */
export type ListTenantEventsRequest$Outbound = {
  tenant_id?: string | undefined;
  destination_id?: string | Array<string> | undefined;
  status?: string | undefined;
};

/** @internal */
export const ListTenantEventsRequest$outboundSchema: z.ZodType<
  ListTenantEventsRequest$Outbound,
  z.ZodTypeDef,
  ListTenantEventsRequest
> = z.object({
  tenantId: z.string().optional(),
  destinationId: z.union([z.string(), z.array(z.string())]).optional(),
  status: ListTenantEventsStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    destinationId: "destination_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventsRequest$ {
  /** @deprecated use `ListTenantEventsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTenantEventsRequest$inboundSchema;
  /** @deprecated use `ListTenantEventsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTenantEventsRequest$outboundSchema;
  /** @deprecated use `ListTenantEventsRequest$Outbound` instead. */
  export type Outbound = ListTenantEventsRequest$Outbound;
}

export function listTenantEventsRequestToJSON(
  listTenantEventsRequest: ListTenantEventsRequest,
): string {
  return JSON.stringify(
    ListTenantEventsRequest$outboundSchema.parse(listTenantEventsRequest),
  );
}

export function listTenantEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTenantEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantEventsRequest' from JSON`,
  );
}
