/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTenantDestinationGlobals = {
  tenantId?: string | undefined;
};

export type DeleteTenantDestinationSecurity = {
  adminApiKey?: string | undefined;
  tenantJwt?: string | undefined;
};

export type DeleteTenantDestinationRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the destination.
   */
  destinationId: string;
};

/** @internal */
export const DeleteTenantDestinationGlobals$inboundSchema: z.ZodType<
  DeleteTenantDestinationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type DeleteTenantDestinationGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const DeleteTenantDestinationGlobals$outboundSchema: z.ZodType<
  DeleteTenantDestinationGlobals$Outbound,
  z.ZodTypeDef,
  DeleteTenantDestinationGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTenantDestinationGlobals$ {
  /** @deprecated use `DeleteTenantDestinationGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteTenantDestinationGlobals$inboundSchema;
  /** @deprecated use `DeleteTenantDestinationGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteTenantDestinationGlobals$outboundSchema;
  /** @deprecated use `DeleteTenantDestinationGlobals$Outbound` instead. */
  export type Outbound = DeleteTenantDestinationGlobals$Outbound;
}

export function deleteTenantDestinationGlobalsToJSON(
  deleteTenantDestinationGlobals: DeleteTenantDestinationGlobals,
): string {
  return JSON.stringify(
    DeleteTenantDestinationGlobals$outboundSchema.parse(
      deleteTenantDestinationGlobals,
    ),
  );
}

export function deleteTenantDestinationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTenantDestinationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTenantDestinationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTenantDestinationGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteTenantDestinationSecurity$inboundSchema: z.ZodType<
  DeleteTenantDestinationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  AdminApiKey: z.string().optional(),
  TenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "AdminApiKey": "adminApiKey",
    "TenantJwt": "tenantJwt",
  });
});

/** @internal */
export type DeleteTenantDestinationSecurity$Outbound = {
  AdminApiKey?: string | undefined;
  TenantJwt?: string | undefined;
};

/** @internal */
export const DeleteTenantDestinationSecurity$outboundSchema: z.ZodType<
  DeleteTenantDestinationSecurity$Outbound,
  z.ZodTypeDef,
  DeleteTenantDestinationSecurity
> = z.object({
  adminApiKey: z.string().optional(),
  tenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    adminApiKey: "AdminApiKey",
    tenantJwt: "TenantJwt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTenantDestinationSecurity$ {
  /** @deprecated use `DeleteTenantDestinationSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteTenantDestinationSecurity$inboundSchema;
  /** @deprecated use `DeleteTenantDestinationSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteTenantDestinationSecurity$outboundSchema;
  /** @deprecated use `DeleteTenantDestinationSecurity$Outbound` instead. */
  export type Outbound = DeleteTenantDestinationSecurity$Outbound;
}

export function deleteTenantDestinationSecurityToJSON(
  deleteTenantDestinationSecurity: DeleteTenantDestinationSecurity,
): string {
  return JSON.stringify(
    DeleteTenantDestinationSecurity$outboundSchema.parse(
      deleteTenantDestinationSecurity,
    ),
  );
}

export function deleteTenantDestinationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTenantDestinationSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTenantDestinationSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTenantDestinationSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteTenantDestinationRequest$inboundSchema: z.ZodType<
  DeleteTenantDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  destination_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "destination_id": "destinationId",
  });
});

/** @internal */
export type DeleteTenantDestinationRequest$Outbound = {
  tenant_id?: string | undefined;
  destination_id: string;
};

/** @internal */
export const DeleteTenantDestinationRequest$outboundSchema: z.ZodType<
  DeleteTenantDestinationRequest$Outbound,
  z.ZodTypeDef,
  DeleteTenantDestinationRequest
> = z.object({
  tenantId: z.string().optional(),
  destinationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    destinationId: "destination_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTenantDestinationRequest$ {
  /** @deprecated use `DeleteTenantDestinationRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTenantDestinationRequest$inboundSchema;
  /** @deprecated use `DeleteTenantDestinationRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTenantDestinationRequest$outboundSchema;
  /** @deprecated use `DeleteTenantDestinationRequest$Outbound` instead. */
  export type Outbound = DeleteTenantDestinationRequest$Outbound;
}

export function deleteTenantDestinationRequestToJSON(
  deleteTenantDestinationRequest: DeleteTenantDestinationRequest,
): string {
  return JSON.stringify(
    DeleteTenantDestinationRequest$outboundSchema.parse(
      deleteTenantDestinationRequest,
    ),
  );
}

export function deleteTenantDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTenantDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTenantDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTenantDestinationRequest' from JSON`,
  );
}
