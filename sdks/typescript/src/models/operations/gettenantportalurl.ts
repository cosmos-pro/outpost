/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTenantPortalUrlGlobals = {
  tenantId?: string | undefined;
};

/**
 * Optional theme preference for the portal.
 */
export const GetTenantPortalUrlTheme = {
  Light: "light",
  Dark: "dark",
} as const;
/**
 * Optional theme preference for the portal.
 */
export type GetTenantPortalUrlTheme = ClosedEnum<
  typeof GetTenantPortalUrlTheme
>;

export type GetTenantPortalUrlRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * Optional theme preference for the portal.
   */
  theme?: GetTenantPortalUrlTheme | undefined;
};

/** @internal */
export const GetTenantPortalUrlGlobals$inboundSchema: z.ZodType<
  GetTenantPortalUrlGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type GetTenantPortalUrlGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const GetTenantPortalUrlGlobals$outboundSchema: z.ZodType<
  GetTenantPortalUrlGlobals$Outbound,
  z.ZodTypeDef,
  GetTenantPortalUrlGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantPortalUrlGlobals$ {
  /** @deprecated use `GetTenantPortalUrlGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTenantPortalUrlGlobals$inboundSchema;
  /** @deprecated use `GetTenantPortalUrlGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTenantPortalUrlGlobals$outboundSchema;
  /** @deprecated use `GetTenantPortalUrlGlobals$Outbound` instead. */
  export type Outbound = GetTenantPortalUrlGlobals$Outbound;
}

export function getTenantPortalUrlGlobalsToJSON(
  getTenantPortalUrlGlobals: GetTenantPortalUrlGlobals,
): string {
  return JSON.stringify(
    GetTenantPortalUrlGlobals$outboundSchema.parse(getTenantPortalUrlGlobals),
  );
}

export function getTenantPortalUrlGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantPortalUrlGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTenantPortalUrlGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantPortalUrlGlobals' from JSON`,
  );
}

/** @internal */
export const GetTenantPortalUrlTheme$inboundSchema: z.ZodNativeEnum<
  typeof GetTenantPortalUrlTheme
> = z.nativeEnum(GetTenantPortalUrlTheme);

/** @internal */
export const GetTenantPortalUrlTheme$outboundSchema: z.ZodNativeEnum<
  typeof GetTenantPortalUrlTheme
> = GetTenantPortalUrlTheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantPortalUrlTheme$ {
  /** @deprecated use `GetTenantPortalUrlTheme$inboundSchema` instead. */
  export const inboundSchema = GetTenantPortalUrlTheme$inboundSchema;
  /** @deprecated use `GetTenantPortalUrlTheme$outboundSchema` instead. */
  export const outboundSchema = GetTenantPortalUrlTheme$outboundSchema;
}

/** @internal */
export const GetTenantPortalUrlRequest$inboundSchema: z.ZodType<
  GetTenantPortalUrlRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  theme: GetTenantPortalUrlTheme$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type GetTenantPortalUrlRequest$Outbound = {
  tenant_id?: string | undefined;
  theme?: string | undefined;
};

/** @internal */
export const GetTenantPortalUrlRequest$outboundSchema: z.ZodType<
  GetTenantPortalUrlRequest$Outbound,
  z.ZodTypeDef,
  GetTenantPortalUrlRequest
> = z.object({
  tenantId: z.string().optional(),
  theme: GetTenantPortalUrlTheme$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantPortalUrlRequest$ {
  /** @deprecated use `GetTenantPortalUrlRequest$inboundSchema` instead. */
  export const inboundSchema = GetTenantPortalUrlRequest$inboundSchema;
  /** @deprecated use `GetTenantPortalUrlRequest$outboundSchema` instead. */
  export const outboundSchema = GetTenantPortalUrlRequest$outboundSchema;
  /** @deprecated use `GetTenantPortalUrlRequest$Outbound` instead. */
  export type Outbound = GetTenantPortalUrlRequest$Outbound;
}

export function getTenantPortalUrlRequestToJSON(
  getTenantPortalUrlRequest: GetTenantPortalUrlRequest,
): string {
  return JSON.stringify(
    GetTenantPortalUrlRequest$outboundSchema.parse(getTenantPortalUrlRequest),
  );
}

export function getTenantPortalUrlRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantPortalUrlRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTenantPortalUrlRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantPortalUrlRequest' from JSON`,
  );
}
