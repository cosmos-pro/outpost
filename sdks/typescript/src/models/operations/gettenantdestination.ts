/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTenantDestinationGlobals = {
  tenantId?: string | undefined;
};

export type GetTenantDestinationSecurity = {
  adminApiKey?: string | undefined;
  tenantJwt?: string | undefined;
};

export type GetTenantDestinationRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the destination.
   */
  destinationId: string;
};

/** @internal */
export const GetTenantDestinationGlobals$inboundSchema: z.ZodType<
  GetTenantDestinationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type GetTenantDestinationGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const GetTenantDestinationGlobals$outboundSchema: z.ZodType<
  GetTenantDestinationGlobals$Outbound,
  z.ZodTypeDef,
  GetTenantDestinationGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantDestinationGlobals$ {
  /** @deprecated use `GetTenantDestinationGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTenantDestinationGlobals$inboundSchema;
  /** @deprecated use `GetTenantDestinationGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTenantDestinationGlobals$outboundSchema;
  /** @deprecated use `GetTenantDestinationGlobals$Outbound` instead. */
  export type Outbound = GetTenantDestinationGlobals$Outbound;
}

export function getTenantDestinationGlobalsToJSON(
  getTenantDestinationGlobals: GetTenantDestinationGlobals,
): string {
  return JSON.stringify(
    GetTenantDestinationGlobals$outboundSchema.parse(
      getTenantDestinationGlobals,
    ),
  );
}

export function getTenantDestinationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantDestinationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTenantDestinationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantDestinationGlobals' from JSON`,
  );
}

/** @internal */
export const GetTenantDestinationSecurity$inboundSchema: z.ZodType<
  GetTenantDestinationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  AdminApiKey: z.string().optional(),
  TenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "AdminApiKey": "adminApiKey",
    "TenantJwt": "tenantJwt",
  });
});

/** @internal */
export type GetTenantDestinationSecurity$Outbound = {
  AdminApiKey?: string | undefined;
  TenantJwt?: string | undefined;
};

/** @internal */
export const GetTenantDestinationSecurity$outboundSchema: z.ZodType<
  GetTenantDestinationSecurity$Outbound,
  z.ZodTypeDef,
  GetTenantDestinationSecurity
> = z.object({
  adminApiKey: z.string().optional(),
  tenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    adminApiKey: "AdminApiKey",
    tenantJwt: "TenantJwt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantDestinationSecurity$ {
  /** @deprecated use `GetTenantDestinationSecurity$inboundSchema` instead. */
  export const inboundSchema = GetTenantDestinationSecurity$inboundSchema;
  /** @deprecated use `GetTenantDestinationSecurity$outboundSchema` instead. */
  export const outboundSchema = GetTenantDestinationSecurity$outboundSchema;
  /** @deprecated use `GetTenantDestinationSecurity$Outbound` instead. */
  export type Outbound = GetTenantDestinationSecurity$Outbound;
}

export function getTenantDestinationSecurityToJSON(
  getTenantDestinationSecurity: GetTenantDestinationSecurity,
): string {
  return JSON.stringify(
    GetTenantDestinationSecurity$outboundSchema.parse(
      getTenantDestinationSecurity,
    ),
  );
}

export function getTenantDestinationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantDestinationSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTenantDestinationSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantDestinationSecurity' from JSON`,
  );
}

/** @internal */
export const GetTenantDestinationRequest$inboundSchema: z.ZodType<
  GetTenantDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  destination_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "destination_id": "destinationId",
  });
});

/** @internal */
export type GetTenantDestinationRequest$Outbound = {
  tenant_id?: string | undefined;
  destination_id: string;
};

/** @internal */
export const GetTenantDestinationRequest$outboundSchema: z.ZodType<
  GetTenantDestinationRequest$Outbound,
  z.ZodTypeDef,
  GetTenantDestinationRequest
> = z.object({
  tenantId: z.string().optional(),
  destinationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    destinationId: "destination_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantDestinationRequest$ {
  /** @deprecated use `GetTenantDestinationRequest$inboundSchema` instead. */
  export const inboundSchema = GetTenantDestinationRequest$inboundSchema;
  /** @deprecated use `GetTenantDestinationRequest$outboundSchema` instead. */
  export const outboundSchema = GetTenantDestinationRequest$outboundSchema;
  /** @deprecated use `GetTenantDestinationRequest$Outbound` instead. */
  export type Outbound = GetTenantDestinationRequest$Outbound;
}

export function getTenantDestinationRequestToJSON(
  getTenantDestinationRequest: GetTenantDestinationRequest,
): string {
  return JSON.stringify(
    GetTenantDestinationRequest$outboundSchema.parse(
      getTenantDestinationRequest,
    ),
  );
}

export function getTenantDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTenantDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTenantDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTenantDestinationRequest' from JSON`,
  );
}
