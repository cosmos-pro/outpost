/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EnableTenantDestinationGlobals = {
  tenantId?: string | undefined;
};

export type EnableTenantDestinationSecurity = {
  adminApiKey?: string | undefined;
  tenantJwt?: string | undefined;
};

export type EnableTenantDestinationRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the destination.
   */
  destinationId: string;
};

/** @internal */
export const EnableTenantDestinationGlobals$inboundSchema: z.ZodType<
  EnableTenantDestinationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type EnableTenantDestinationGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const EnableTenantDestinationGlobals$outboundSchema: z.ZodType<
  EnableTenantDestinationGlobals$Outbound,
  z.ZodTypeDef,
  EnableTenantDestinationGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnableTenantDestinationGlobals$ {
  /** @deprecated use `EnableTenantDestinationGlobals$inboundSchema` instead. */
  export const inboundSchema = EnableTenantDestinationGlobals$inboundSchema;
  /** @deprecated use `EnableTenantDestinationGlobals$outboundSchema` instead. */
  export const outboundSchema = EnableTenantDestinationGlobals$outboundSchema;
  /** @deprecated use `EnableTenantDestinationGlobals$Outbound` instead. */
  export type Outbound = EnableTenantDestinationGlobals$Outbound;
}

export function enableTenantDestinationGlobalsToJSON(
  enableTenantDestinationGlobals: EnableTenantDestinationGlobals,
): string {
  return JSON.stringify(
    EnableTenantDestinationGlobals$outboundSchema.parse(
      enableTenantDestinationGlobals,
    ),
  );
}

export function enableTenantDestinationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<EnableTenantDestinationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnableTenantDestinationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnableTenantDestinationGlobals' from JSON`,
  );
}

/** @internal */
export const EnableTenantDestinationSecurity$inboundSchema: z.ZodType<
  EnableTenantDestinationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  AdminApiKey: z.string().optional(),
  TenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "AdminApiKey": "adminApiKey",
    "TenantJwt": "tenantJwt",
  });
});

/** @internal */
export type EnableTenantDestinationSecurity$Outbound = {
  AdminApiKey?: string | undefined;
  TenantJwt?: string | undefined;
};

/** @internal */
export const EnableTenantDestinationSecurity$outboundSchema: z.ZodType<
  EnableTenantDestinationSecurity$Outbound,
  z.ZodTypeDef,
  EnableTenantDestinationSecurity
> = z.object({
  adminApiKey: z.string().optional(),
  tenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    adminApiKey: "AdminApiKey",
    tenantJwt: "TenantJwt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnableTenantDestinationSecurity$ {
  /** @deprecated use `EnableTenantDestinationSecurity$inboundSchema` instead. */
  export const inboundSchema = EnableTenantDestinationSecurity$inboundSchema;
  /** @deprecated use `EnableTenantDestinationSecurity$outboundSchema` instead. */
  export const outboundSchema = EnableTenantDestinationSecurity$outboundSchema;
  /** @deprecated use `EnableTenantDestinationSecurity$Outbound` instead. */
  export type Outbound = EnableTenantDestinationSecurity$Outbound;
}

export function enableTenantDestinationSecurityToJSON(
  enableTenantDestinationSecurity: EnableTenantDestinationSecurity,
): string {
  return JSON.stringify(
    EnableTenantDestinationSecurity$outboundSchema.parse(
      enableTenantDestinationSecurity,
    ),
  );
}

export function enableTenantDestinationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<EnableTenantDestinationSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnableTenantDestinationSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnableTenantDestinationSecurity' from JSON`,
  );
}

/** @internal */
export const EnableTenantDestinationRequest$inboundSchema: z.ZodType<
  EnableTenantDestinationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  destination_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "destination_id": "destinationId",
  });
});

/** @internal */
export type EnableTenantDestinationRequest$Outbound = {
  tenant_id?: string | undefined;
  destination_id: string;
};

/** @internal */
export const EnableTenantDestinationRequest$outboundSchema: z.ZodType<
  EnableTenantDestinationRequest$Outbound,
  z.ZodTypeDef,
  EnableTenantDestinationRequest
> = z.object({
  tenantId: z.string().optional(),
  destinationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    destinationId: "destination_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnableTenantDestinationRequest$ {
  /** @deprecated use `EnableTenantDestinationRequest$inboundSchema` instead. */
  export const inboundSchema = EnableTenantDestinationRequest$inboundSchema;
  /** @deprecated use `EnableTenantDestinationRequest$outboundSchema` instead. */
  export const outboundSchema = EnableTenantDestinationRequest$outboundSchema;
  /** @deprecated use `EnableTenantDestinationRequest$Outbound` instead. */
  export type Outbound = EnableTenantDestinationRequest$Outbound;
}

export function enableTenantDestinationRequestToJSON(
  enableTenantDestinationRequest: EnableTenantDestinationRequest,
): string {
  return JSON.stringify(
    EnableTenantDestinationRequest$outboundSchema.parse(
      enableTenantDestinationRequest,
    ),
  );
}

export function enableTenantDestinationRequestFromJSON(
  jsonString: string,
): SafeParseResult<EnableTenantDestinationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnableTenantDestinationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnableTenantDestinationRequest' from JSON`,
  );
}
