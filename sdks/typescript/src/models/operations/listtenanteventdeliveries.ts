/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTenantEventDeliveriesGlobals = {
  tenantId?: string | undefined;
};

export type ListTenantEventDeliveriesSecurity = {
  adminApiKey?: string | undefined;
  tenantJwt?: string | undefined;
};

export type ListTenantEventDeliveriesRequest = {
  /**
   * The ID of the tenant. Required when using AdminApiKey authentication.
   */
  tenantId?: string | undefined;
  /**
   * The ID of the event.
   */
  eventId: string;
};

/** @internal */
export const ListTenantEventDeliveriesGlobals$inboundSchema: z.ZodType<
  ListTenantEventDeliveriesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
  });
});

/** @internal */
export type ListTenantEventDeliveriesGlobals$Outbound = {
  tenant_id?: string | undefined;
};

/** @internal */
export const ListTenantEventDeliveriesGlobals$outboundSchema: z.ZodType<
  ListTenantEventDeliveriesGlobals$Outbound,
  z.ZodTypeDef,
  ListTenantEventDeliveriesGlobals
> = z.object({
  tenantId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventDeliveriesGlobals$ {
  /** @deprecated use `ListTenantEventDeliveriesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListTenantEventDeliveriesGlobals$inboundSchema;
  /** @deprecated use `ListTenantEventDeliveriesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListTenantEventDeliveriesGlobals$outboundSchema;
  /** @deprecated use `ListTenantEventDeliveriesGlobals$Outbound` instead. */
  export type Outbound = ListTenantEventDeliveriesGlobals$Outbound;
}

export function listTenantEventDeliveriesGlobalsToJSON(
  listTenantEventDeliveriesGlobals: ListTenantEventDeliveriesGlobals,
): string {
  return JSON.stringify(
    ListTenantEventDeliveriesGlobals$outboundSchema.parse(
      listTenantEventDeliveriesGlobals,
    ),
  );
}

export function listTenantEventDeliveriesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantEventDeliveriesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTenantEventDeliveriesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantEventDeliveriesGlobals' from JSON`,
  );
}

/** @internal */
export const ListTenantEventDeliveriesSecurity$inboundSchema: z.ZodType<
  ListTenantEventDeliveriesSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  AdminApiKey: z.string().optional(),
  TenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "AdminApiKey": "adminApiKey",
    "TenantJwt": "tenantJwt",
  });
});

/** @internal */
export type ListTenantEventDeliveriesSecurity$Outbound = {
  AdminApiKey?: string | undefined;
  TenantJwt?: string | undefined;
};

/** @internal */
export const ListTenantEventDeliveriesSecurity$outboundSchema: z.ZodType<
  ListTenantEventDeliveriesSecurity$Outbound,
  z.ZodTypeDef,
  ListTenantEventDeliveriesSecurity
> = z.object({
  adminApiKey: z.string().optional(),
  tenantJwt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    adminApiKey: "AdminApiKey",
    tenantJwt: "TenantJwt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventDeliveriesSecurity$ {
  /** @deprecated use `ListTenantEventDeliveriesSecurity$inboundSchema` instead. */
  export const inboundSchema = ListTenantEventDeliveriesSecurity$inboundSchema;
  /** @deprecated use `ListTenantEventDeliveriesSecurity$outboundSchema` instead. */
  export const outboundSchema =
    ListTenantEventDeliveriesSecurity$outboundSchema;
  /** @deprecated use `ListTenantEventDeliveriesSecurity$Outbound` instead. */
  export type Outbound = ListTenantEventDeliveriesSecurity$Outbound;
}

export function listTenantEventDeliveriesSecurityToJSON(
  listTenantEventDeliveriesSecurity: ListTenantEventDeliveriesSecurity,
): string {
  return JSON.stringify(
    ListTenantEventDeliveriesSecurity$outboundSchema.parse(
      listTenantEventDeliveriesSecurity,
    ),
  );
}

export function listTenantEventDeliveriesSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantEventDeliveriesSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTenantEventDeliveriesSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantEventDeliveriesSecurity' from JSON`,
  );
}

/** @internal */
export const ListTenantEventDeliveriesRequest$inboundSchema: z.ZodType<
  ListTenantEventDeliveriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenant_id: z.string().optional(),
  event_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tenant_id": "tenantId",
    "event_id": "eventId",
  });
});

/** @internal */
export type ListTenantEventDeliveriesRequest$Outbound = {
  tenant_id?: string | undefined;
  event_id: string;
};

/** @internal */
export const ListTenantEventDeliveriesRequest$outboundSchema: z.ZodType<
  ListTenantEventDeliveriesRequest$Outbound,
  z.ZodTypeDef,
  ListTenantEventDeliveriesRequest
> = z.object({
  tenantId: z.string().optional(),
  eventId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tenantId: "tenant_id",
    eventId: "event_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTenantEventDeliveriesRequest$ {
  /** @deprecated use `ListTenantEventDeliveriesRequest$inboundSchema` instead. */
  export const inboundSchema = ListTenantEventDeliveriesRequest$inboundSchema;
  /** @deprecated use `ListTenantEventDeliveriesRequest$outboundSchema` instead. */
  export const outboundSchema = ListTenantEventDeliveriesRequest$outboundSchema;
  /** @deprecated use `ListTenantEventDeliveriesRequest$Outbound` instead. */
  export type Outbound = ListTenantEventDeliveriesRequest$Outbound;
}

export function listTenantEventDeliveriesRequestToJSON(
  listTenantEventDeliveriesRequest: ListTenantEventDeliveriesRequest,
): string {
  return JSON.stringify(
    ListTenantEventDeliveriesRequest$outboundSchema.parse(
      listTenantEventDeliveriesRequest,
    ),
  );
}

export function listTenantEventDeliveriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTenantEventDeliveriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTenantEventDeliveriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTenantEventDeliveriesRequest' from JSON`,
  );
}
