/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Optional theme preference for the portal.
 */
export const GetPortalUrlJwtContextTheme = {
  Light: "light",
  Dark: "dark",
} as const;
/**
 * Optional theme preference for the portal.
 */
export type GetPortalUrlJwtContextTheme = ClosedEnum<
  typeof GetPortalUrlJwtContextTheme
>;

export type GetPortalUrlJwtContextRequest = {
  /**
   * Optional theme preference for the portal.
   */
  theme?: GetPortalUrlJwtContextTheme | undefined;
};

/** @internal */
export const GetPortalUrlJwtContextTheme$inboundSchema: z.ZodNativeEnum<
  typeof GetPortalUrlJwtContextTheme
> = z.nativeEnum(GetPortalUrlJwtContextTheme);

/** @internal */
export const GetPortalUrlJwtContextTheme$outboundSchema: z.ZodNativeEnum<
  typeof GetPortalUrlJwtContextTheme
> = GetPortalUrlJwtContextTheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPortalUrlJwtContextTheme$ {
  /** @deprecated use `GetPortalUrlJwtContextTheme$inboundSchema` instead. */
  export const inboundSchema = GetPortalUrlJwtContextTheme$inboundSchema;
  /** @deprecated use `GetPortalUrlJwtContextTheme$outboundSchema` instead. */
  export const outboundSchema = GetPortalUrlJwtContextTheme$outboundSchema;
}

/** @internal */
export const GetPortalUrlJwtContextRequest$inboundSchema: z.ZodType<
  GetPortalUrlJwtContextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  theme: GetPortalUrlJwtContextTheme$inboundSchema.optional(),
});

/** @internal */
export type GetPortalUrlJwtContextRequest$Outbound = {
  theme?: string | undefined;
};

/** @internal */
export const GetPortalUrlJwtContextRequest$outboundSchema: z.ZodType<
  GetPortalUrlJwtContextRequest$Outbound,
  z.ZodTypeDef,
  GetPortalUrlJwtContextRequest
> = z.object({
  theme: GetPortalUrlJwtContextTheme$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPortalUrlJwtContextRequest$ {
  /** @deprecated use `GetPortalUrlJwtContextRequest$inboundSchema` instead. */
  export const inboundSchema = GetPortalUrlJwtContextRequest$inboundSchema;
  /** @deprecated use `GetPortalUrlJwtContextRequest$outboundSchema` instead. */
  export const outboundSchema = GetPortalUrlJwtContextRequest$outboundSchema;
  /** @deprecated use `GetPortalUrlJwtContextRequest$Outbound` instead. */
  export type Outbound = GetPortalUrlJwtContextRequest$Outbound;
}

export function getPortalUrlJwtContextRequestToJSON(
  getPortalUrlJwtContextRequest: GetPortalUrlJwtContextRequest,
): string {
  return JSON.stringify(
    GetPortalUrlJwtContextRequest$outboundSchema.parse(
      getPortalUrlJwtContextRequest,
    ),
  );
}

export function getPortalUrlJwtContextRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPortalUrlJwtContextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPortalUrlJwtContextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPortalUrlJwtContextRequest' from JSON`,
  );
}
