openapi: 3.1.0
info:
  title: Outpost API
  version: "0.0.1"
  description: The Outpost API is a REST-based JSON API for managing tenants, destinations, and publishing events.
  contact:
    name: Outpost Support
    email: support@hookdeck.com
    url: https://outpost.hookdeck.com/docs
servers:
  - url: http://localhost:3333
    description: Local development server
components:
  securitySchemes:
    AdminApiKey:
      type: http
      scheme: bearer
      description: Admin API Key configured via API_KEY environment variable.
    TenantJwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Per-tenant JWT token valid for 24 hours. When used, tenant_id path parameter is inferred.
  schemas:
    Tenant:
      type: object
      properties:
        id:
          type: string
          description: User-defined system ID for the tenant.
          example: "123"
        destinations_count:
          type: integer
          description: Number of destinations associated with the tenant.
          example: 5
        topics:
          type: array
          items:
            type: string
          description: List of subscribed topics across all destinations for this tenant.
          example: ["user.created", "user.deleted"]
        created_at:
          type: string
          format: date-time
          description: ISO Date when the tenant was created.
          example: "2024-01-01T00:00:00Z"
    PortalRedirect:
      type: object
      properties:
        redirect_url:
          type: string
          format: url
          description: Redirect URL containing a JWT to authenticate the user with the portal.
          example: "https://webhooks.acme.com/?token=JWT_TOKEN"
    TenantToken:
      type: object
      properties:
        token:
          type: string
          description: JWT token scoped to the tenant for safe browser API calls.
          example: "SOME_JWT_TOKEN"
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
    Destination:
      type: object
      properties:
        id:
          type: string
          description: Control plane generated ID or user provided ID for the destination.
          example: "des_12345"
        type:
          type: string
          description: Type of the destination (e.g., 'webhooks').
          example: "webhooks"
        topics:
          type: array
          items:
            type: string
          description: Topics of events this destination is eligible for. Can contain '*' for all topics.
          example: ["user.created", "user.updated"]
        config:
          type: object
          description: Destination type-specific configuration. Schema depends on the 'type'.
          example: { "url": "https://example.com/webhooks/user" }
          additionalProperties: true # Allow any structure
        credentials:
          type: object
          description: Destination type-specific credentials (AES encrypted, obfuscated by default). Schema depends on the 'type'.
          example: { "secret": "some***********" }
          additionalProperties: true # Allow any structure
        disabled_at:
          type: string
          format: date-time
          nullable: true
          description: ISO Date when the destination was disabled, or null if enabled.
          example: null
        created_at:
          type: string
          format: date-time
          description: ISO Date when the destination was created.
          example: "2024-01-01T00:00:00Z"
    DestinationCreate:
      type: object
      properties:
        id:
          type: string
          description: Optional user-provided ID. A UUID will be generated if empty.
          example: "123"
        type:
          type: string
          description: String of a valid destination type.
          example: "webhooks"
        topics:
          oneOf:
            - type: string
              enum: ["*"]
            - type: array
              items:
                type: string
          description: '"*" or an array of enabled topics.'
          example: "*"
        config:
          type: object
          description: Config object for the given destination type.
          example: { "url": "https://example.com/webhooks" }
          additionalProperties: true
        credentials:
          type: object
          nullable: true
          description: Credentials for the given destination type. Can be empty or null. Specific fields depend on type (e.g., secret, previous_secret, rotate_secret for webhooks).
          additionalProperties: true
    DestinationUpdate:
      type: object
      properties:
        type:
          type: string
          description: Optional. String of a valid destination type.
          example: "webhooks"
        topics:
          oneOf:
            - type: string
              enum: ["*"]
            - type: array
              items:
                type: string
          description: Optional. '*' or an array of enabled topics.
          example: "*"
        config:
          type: object
          description: Optional. Config object for the given destination type.
          example: { "url": "https://example.com/webhooks" }
          additionalProperties: true
        credentials:
          type: object
          nullable: true
          description: Optional. Credentials for the given destination type. Can be empty or null.
          additionalProperties: true
    DestinationOAuthRedirect:
      type: object
      properties:
        redirect_url:
          type: string
          format: url
          description: Redirect URL for OAuth flow if applicable during destination update.
          example: "https://dashboard.hookdeck.com/authorize?token=12313123"
    PublishRequest:
      type: object
      required:
        - tenant_id
        - topic
        - eligible_for_retry
        - data
      properties:
        tenant_id:
          type: string
          description: The ID of the tenant to publish for.
          example: "<TENANT_ID>"
        destination_id:
          type: string
          description: Optional. Route event to a specific destination.
          example: "<DESTINATION_ID>"
        topic:
          type: string
          description: Topic name for the event.
          example: "topic.name"
        eligible_for_retry:
          type: boolean
          description: Should event delivery be retried on failure.
        metadata:
          type: object
          description: Any JSON payload for metadata.
          additionalProperties: true
          example: { "meta": "data" }
        data:
          type: object
          description: Any JSON payload for the event data.
          additionalProperties: true
          example: { "user_id": "userid" }
    DestinationTypeSchema:
      type: object
      properties:
        type:
          type: string
          example: "webhook"
        label:
          type: string
          example: "Webhook"
        description:
          type: string
          example: "Send event via an HTTP POST request to a URL"
        icon:
          type: string
          description: SVG icon string.
          example: "<svg />"
        instructions:
          type: string
          description: Markdown instructions.
          example: "Some *markdown*"
        remote_setup_url:
          type: string
          format: url
          description: >-
            Some destinations may have Oauth flow or other managed-setup flow that can be triggered with a link. If a `remote_setup_url` is set then the user should be prompted to follow the link to configure the destination.

            See the [dashboard design guide](https://outpost.hookdeck.com/guides/dashboard-design.mdx) for recommended UI patterns and wireframes for implementation in your own app.
          example: "https://dashboard.hookdeck.com/authorize?provider=acme"
        config_fields:
          type: array
          description: Config fields are non-secret values that can be stored and displayed to the user in plain text.
          items:
            $ref: "#/components/schemas/DestinationSchemaField"
        credential_fields:
          type: array
          description: Credential fields are secret values that will be AES encrypted and obfuscated to the user. Some credentials may not be obfuscated; the destination type dictates the obfuscation logic.
          items:
            $ref: "#/components/schemas/DestinationSchemaField"
    DestinationSchemaField:
      type: object
      properties:
        type:
          type: string
          enum: [text, number, boolean] # Extend as needed
          example: "text"
        label:
          type: string
          example: "URL"
        description:
          type: string
          example: "The URL to send the event to"
        validation:
          type: string
          description: Regex string for validation.
          example: "/((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+(:[0-9]+)?|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/"
        required:
          type: boolean
          example: true
    Event:
      type: object
      properties:
        id:
          type: string
          example: "123"
        destination_id:
          type: string
          example: "456"
        topic:
          type: string
          example: "user.created"
        time:
          type: string
          format: date-time
          description: Time the event was received/processed.
          example: "2024-01-01T00:00:00Z"
        successful_at:
          type: string
          format: date-time
          nullable: true
          description: Time the event was successfully delivered.
          example: "2024-01-01T00:00:00Z"
        metadata:
          type: object
          additionalProperties:
            anyOf:
              - type: string
              - type: number
              - type: boolean
          example: { "key": "value" }
        data:
          type: object
          description: Freeform JSON data of the event.
          additionalProperties: true
          example: { "hello": "world" }
    DeliveryAttempt:
      type: object
      properties:
        delivered_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        status:
          type: string
          enum: [success, failed] # Assuming based on example
          example: "success"
        response_status_code:
          type: integer
          example: 200
        response_body:
          type: string # Or potentially object if JSON
          example: '{"status":"ok"}'
        response_headers:
          type: object
          additionalProperties:
            type: string
          example: { "content-type": "application/json" }
security:
  - AdminApiKey: []
  - TenantJwt: [] # Note: Applies globally, but specific paths might override or not need it if AdminApiKey is used.

tags:
  - name: Tenants
    description: Operations related to tenants.
  - name: Destinations
    description: Operations related to destinations.
  - name: Publish
    description: Operations for publishing events.
  - name: Schemas
    description: Operations for retrieving destination type schemas.
  - name: Events
    description: Operations related to event history and deliveries.

paths:
  # Tenants
  /{tenant_id}:
    parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the tenant. Not required if using TenantJwt authentication.
    put:
      tags: [Tenants]
      summary: Create or Update Tenant
      description: Idempotently creates or updates a tenant. Required before associating destinations.
      operationId: putTenant
      responses:
        "200":
          description: Tenant details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        # Add error responses
    get:
      tags: [Tenants]
      summary: Get Tenant
      description: Retrieves details for a specific tenant.
      operationId: getTenant
      responses:
        "200":
          description: Tenant details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        "404":
          description: Tenant not found.
        # Add other error responses
    delete:
      tags: [Tenants]
      summary: Delete Tenant
      description: Deletes the tenant and all associated destinations.
      operationId: deleteTenant
      responses:
        "200":
          description: Success confirmation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Tenant not found.
        # Add other error responses

  /{tenant_id}/portal:
    parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the tenant. Not required if using TenantJwt authentication.
    get:
      tags: [Tenants]
      summary: Get Portal Redirect URL
      description: Returns a redirect URL containing a JWT to authenticate the user with the portal.
      operationId: getPortalUrl
      parameters:
        - name: theme
          in: query
          required: false
          schema:
            type: string
            enum: [light, dark]
          description: Optional theme preference for the portal.
      responses:
        "200":
          description: Portal redirect URL.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortalRedirect"
        "404":
          description: Tenant not found.
        # Add other error responses

  /{tenant_id}/token:
    parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the tenant. Not required if using TenantJwt authentication.
    get:
      tags: [Tenants]
      summary: Get Tenant JWT Token
      description: Returns a JWT token scoped to the tenant for safe browser API calls.
      operationId: getTenantToken
      responses:
        "200":
          description: Tenant JWT token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantToken"
        "404":
          description: Tenant not found.
        # Add other error responses

  # Destinations
  /{tenant_id}/destinations:
    description: |
      The `topics` array can contain either a list of topics or a wildcard `*` implying that all topics are supported. If you do not wish to implement topics for your application, you set all destination topics to `*`.

      By default all destination `credentials` are obfuscated and the values cannot be read. This does not apply to the `webhook` type destination secret and each destination can expose their own obfuscation logic.
    parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the tenant. Not required if using TenantJwt authentication.
    get:
      tags: [Destinations]
      summary: List Destinations
      description: Return a list of the destinations. The endpoint is not paged, and the maximum number is equivalent to the maximum configured number of destinations per tenant through the `MAX_DESTINATIONS_PER_TENANT` env variable.
      operationId: listDestinations
      parameters:
        - name: type
          in: query
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
          description: Filter destinations by type(s).
        - name: topics
          in: query
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
          description: Filter destinations by supported topic(s).
      responses:
        "200":
          description: A list of destinations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Destination"
        "404":
          description: Tenant not found.
        # Add other error responses
    post:
      tags: [Destinations]
      summary: Create Destination
      description: |
        Creates a new destination for the tenant.

        #### Webhook secret & rotation

        Webhook secrets and rotations are a special case for the `webhook` destination type. The destination type `credentials.secret` is only a valid input when using the Admin API and can be omited when a secret is generated automatically.

        Additionally, `credentials.previous_secret` can be used to set a rotated secret during a migration. `credentials.rotate_secret` can be used to automatically rotate the existing secret which results in a new `credentials.secret` and `credentials.previous_secret` value.

        `previous_secret` are valid and used to “double” sign the request for 24 hours.
      operationId: createDestination
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationCreate"
      responses:
        "201": # Assuming 201 Created
          description: Destination created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Destination"
        "400":
          description: Invalid request body or configuration.
        "404":
          description: Tenant not found.
        # Add other error responses (e.g., max destinations reached)

  /{tenant_id}/destinations/{destination_id}:
    parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the tenant. Not required if using TenantJwt authentication.
      - name: destination_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the destination.
    patch:
      tags: [Destinations]
      summary: Update Destination
      description: Updates the configuration of an existing destination. May return an OAuth redirect URL.
      operationId: updateDestination
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationUpdate"
      responses:
        "200":
          description: Destination updated successfully or OAuth redirect needed.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Destination"
                  - $ref: "#/components/schemas/DestinationOAuthRedirect"
        "400":
          description: Invalid request body or configuration.
        "404":
          description: Tenant or Destination not found.
        # Add other error responses
    delete:
      tags: [Destinations]
      summary: Delete Destination
      description: Deletes a specific destination.
      operationId: deleteDestination
      responses:
        "200":
          description: Success confirmation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Tenant or Destination not found.
        # Add other error responses

  /{tenant_id}/destinations/{destination_id}/enable:
    parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the tenant. Not required if using TenantJwt authentication.
      - name: destination_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the destination.
    put:
      tags: [Destinations]
      summary: Enable Destination
      description: Enables a previously disabled destination.
      operationId: enableDestination
      responses:
        "200":
          description: Destination enabled successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Destination"
        "404":
          description: Tenant or Destination not found.
        # Add other error responses

  /{tenant_id}/destinations/{destination_id}/disable:
    parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the tenant. Not required if using TenantJwt authentication.
      - name: destination_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the destination.
    put:
      tags: [Destinations]
      summary: Disable Destination
      description: Disables a previously enabled destination.
      operationId: disableDestination
      responses:
        "200":
          description: Destination disabled successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Destination"
        "404":
          description: Tenant or Destination not found.
        # Add other error responses

  # Publish
  /api/v1/publish:
    post:
      tags: [Publish]
      summary: Publish Event
      description: Publishes an event to the specified topic, potentially routed to a specific destination. Requires Admin API Key.
      operationId: publishEvent
      security: # Override global security, only Admin Key allowed here
        - AdminApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishRequest"
      responses:
        "202": # Accepted seems appropriate as processing is likely async
          description: Event accepted for publishing. Empty body.
        "400":
          description: Invalid request body.
        "401":
          description: Unauthorized (Admin API Key missing or invalid).
        # Add other error responses

  # Schemas
  /destination-types:
    get:
      tags: [Schemas]
      summary: List Destination Type Schemas
      description: Returns a list of JSON-based input schemas for each available destination type. Requires Admin API Key or Tenant JWT.
      operationId: listDestinationTypeSchemas
      responses:
        "200":
          description: A list of destination type schemas.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DestinationTypeSchema"
        # Add error responses

  /destination-types/{type}:
    parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
        description: The type of the destination (e.g., 'webhook').
    get:
      tags: [Schemas]
      summary: Get Destination Type Schema
      description: Returns the input schema for a specific destination type. Requires Admin API Key or Tenant JWT.
      operationId: getDestinationTypeSchema
      responses:
        "200":
          description: The schema for the specified destination type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestinationTypeSchema"
        "404":
          description: Destination type not found.
        # Add other error responses

  # Events
  /{tenant_id}/events:
    parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the tenant. Not required if using TenantJwt authentication.
    get:
      tags: [Events]
      summary: List Events
      description: Retrieves a list of events for the tenant, supporting cursor navigation (details TBD) and filtering.
      operationId: listEvents
      parameters:
        - name: destination_id
          in: query
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
          description: Filter events by destination ID(s).
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [success, failed]
          description: Filter events by delivery status.
        # Add cursor parameters (e.g., 'after', 'limit') when defined
      responses:
        "200":
          description: A list of events.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "404":
          description: Tenant not found.
        # Add other error responses

  /{tenant_id}/events/{event_id}/deliveries:
    parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the tenant. Not required if using TenantJwt authentication.
      - name: event_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the event.
    get:
      tags: [Events]
      summary: List Event Delivery Attempts
      description: Retrieves a list of delivery attempts for a specific event, including response details.
      operationId: listEventDeliveries
      responses:
        "200":
          description: A list of delivery attempts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeliveryAttempt"
        "404":
          description: Tenant or Event not found.
        # Add other error responses
